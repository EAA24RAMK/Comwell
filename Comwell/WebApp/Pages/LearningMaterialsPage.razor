@page "/learningmaterials"
@using Core.Models
@using WebApp.Services
@inject ILearningMaterialService MaterialService
@inject IStudentPlanService StudentPlanService
@inject IUserService UserService
@inject NavigationManager Nav

<h3>Læringsmateriale</h3>
<p></p>

<!-- Viser succes- eller fejlbeskeder -->
@if (!string.IsNullOrEmpty(successMessage))
{
    <p style="color: green">@successMessage</p>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red">@errorMessage</p>
}

<!-- Sektion for upload og tilføjelse, kun synlig for HR og Køkkenchef -->
@if (currentUser?.Role == "HR" || currentUser?.Role == "Køkkenchef")
{
    <!-- Upload dokument sektion -->
    <div class="section-card">
        <h4>Upload dokument</h4>
        <InputFile OnChange="HandleFileSelected" />
        <input type="text" @bind="uploadTitle" placeholder="Titel" class="form-control mt-2" />
        <select class="form-select mt-2" @bind="uploadSubtaskId">
            <option value="">Vælg delmål</option>
            @foreach (var s in subtasks)
            {
                <option value="@s.Id">@s.Text</option>
            }
        </select>
        <div class="filters mt-3">
            <button @onclick="UploadFile">Upload</button>
        </div>
    </div>

    <!-- Tilføj link sektion -->
    <div class="section-card">
        <h4>Tilføj link</h4>
        <input type="text" @bind="linkTitle" placeholder="Titel" class="form-control" />
        <input type="text" @bind="linkUrl" placeholder="https://..." class="form-control mt-2" />
        <select class="form-select mt-2" @bind="linkSubtaskId">
            <option value="">Vælg delmål</option>
            @foreach (var s in subtasks)
            {
                <option value="@s.Id">@s.Text</option>
            }
        </select>
        <div class="filters mt-3">
            <button @onclick="AddLink">Tilføj link</button>
        </div>
    </div>
}

<!-- Liste over materialer -->
<h4>Materialer</h4>
@if (materials.Count == 0)
{
    <p>Ingen materialer endnu.</p>
}
else
{
    @foreach (var mat in materials.Where(m => !filteredSubtaskId.HasValue || m.SubtaskId == filteredSubtaskId))
    {
        var subtaskName = subtasks.FirstOrDefault(s => s.Id == mat.SubtaskId)?.Text ?? "Ukendt delmål";

        <div class="material-card">
            <div class="material-title">@mat.Title</div>
            <div class="material-subtask">Delmål: @subtaskName</div>

            @if (mat.IsLink)
            {
                <a href="@mat.LinkUrl" target="_blank">[Åbn link]</a>
            }
            else
            {
                <a href="@($"https://comwelltpapi.azurewebsites.net/api/LearningMaterial/download/{mat.FileId}")" target="_blank" download="@mat.FileName">[Download]</a>
            }

            @if (currentUser?.Role == "HR" || currentUser?.Role == "Køkkenchef")
            {
                <div class="filters material-delete">
                    <button @onclick="() => DeleteMaterial(mat.Id)">Slet</button>
                </div>
            }
        </div>
    }
}

@code {
    private User? currentUser;                        // Aktuelt loggede bruger
    private List<LearningMaterial> materials = new(); // Liste over læringsmaterialer
    private List<Subtask> subtasks = new();           // Liste over delmål (subtasks)

    // Upload
    private IBrowserFile? selectedFile;              // Fil valgt af brugeren
    private string uploadTitle = string.Empty;       // Titel på filen
    private int? uploadSubtaskId;                    // ID på det delmål filen tilknyttes

    // Link
    private string linkTitle = string.Empty;         // Titel på linket
    private string linkUrl = string.Empty;           // URL på linket
    private int? linkSubtaskId;                      // ID på det delmål linket tilknyttes

    // Feedback beskeder
    private string? successMessage;                  // Succesbesked
    private string? errorMessage;                    // Fejlbesked

    // Filter
    private int? filteredSubtaskId;                  // Hvis sat, vis kun materialer for valgt subtask

    // Initialisering af siden
    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUserAsync(); // Hent den nuværende bruger
        var plans = await StudentPlanService.GetPlansByUserAsync(currentUser); // Hent brugerens elevplaner
        var plan = plans.FirstOrDefault(); // Brug den første plan hvis der er flere

        if (plan != null)
            subtasks = plan.Goals.SelectMany(g => g.Subtasks).ToList(); // Hent alle delmål som liste

        // Læs subtaskId fra URL (fx ved klik fra delmål)
        var uri = new Uri(Nav.Uri); //url hentes med Nav.Uri og laver den til om til et uri objekt
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query); // Tager query-delen af URL'en (det efter ?) og parser den til nøgle/værdi-par
                                                                                         // Eksempel: "?subtaskId=5" bliver til et dictionary hvor "subtaskId" = "5"
        var subtaskIdString = query.Get("subtaskId");

        // Konverterer SubtaskId fra string til int.
        if (int.TryParse(subtaskIdString, out var sid)) // Henter subtaskID i URl'en, hvis den findes filtreres materials i markuppen (foreach løkken)
        {
            filteredSubtaskId = sid;
        }
        
        materials = await MaterialService.GetAllAsync();
    }

    // Håndterer når en bruger vælger en fil i input feltet.
    // InputFileChangeEventArgs indeholder den valgte fil og dens data (navn, størrelse, type).
    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    // Formål: Når brugeren vælger en fil og klikker upload, sendes filen sammen med en titel og delmål-ID til backend.
    // Hvis upload lykkes, tilføjes det nye læringsmateriale til listen og en succesbesked vises.
    // Hvis der er fejl (fx manglende titel eller fil), vises en fejlbesked.
    private async Task UploadFile()
    {
        // Valider input: Sørger for at alle nødvendige felter er udfyldt
        if (selectedFile == null || string.IsNullOrWhiteSpace(uploadTitle) || uploadSubtaskId is null)
        {
            errorMessage = "Udfyld titel, vælg fil og delmål.";
            return;
        }

        // Åbn filstream fra den valgte fil (filen åbnes som en datastrøm)
        using var stream = selectedFile.OpenReadStream(long.MaxValue);
        
        // Kald vores service for at uploade filen sammen med metadata
        var result = await MaterialService.UploadFileAsync(
            stream,                  // Selve filindholdet
            selectedFile.Name,        // Navnet på filen
            uploadTitle,              // Titel givet af brugeren
            uploadSubtaskId.Value     // ID på delmålet, materialet tilknyttes
        );
        
        if (result != null)
        {
            materials.Add(result);
            uploadTitle = string.Empty;
            uploadSubtaskId = null;
            successMessage = "Fil uploadet!";
            errorMessage = null;
        }
        else
        {
            errorMessage = "Noget gik galt under upload.";
            successMessage = null;
        }
    }

    // Tilføj et link som læringsmateriale
    // Formål: Giver brugeren mulighed for at tilføje et link som læringsmateriale
    private async Task AddLink()
    {
        // Valider input: Tjek om både titel, URL og delmål er angivet
        if (string.IsNullOrWhiteSpace(linkTitle) || string.IsNullOrWhiteSpace(linkUrl) || linkSubtaskId is null)
        {
            errorMessage = "Udfyld titel, link og vælg delmål.";
            return;
        }

        // Opret et nyt læringsmateriale-objekt for linket
        var link = new LearningMaterial
        {
            Title = linkTitle,
            SubtaskId = linkSubtaskId.Value,
            IsLink = true,
            LinkUrl = linkUrl
        };

        // Kald service for at gemme linket i databasen
        var result = await MaterialService.AddLinkAsync(link);
        
        if (result != null)
        {
            materials.Add(result);
            linkTitle = string.Empty;
            linkUrl = string.Empty;
            linkSubtaskId = null;
            successMessage = "Link tilføjet!";
            errorMessage = null;
        }
        else
        {
            errorMessage = "Kunne ikke tilføje link.";
            successMessage = null;
        }
    }
    
    // Formål: Giver brugeren mulighed for at fjerne et eksisterende læringsmateriale
    private async Task DeleteMaterial(int id)
    {
        // Kald service for at slette læringsmaterialet i backend
        var confirmed = await MaterialService.DeleteAsync(id);
        
        if (confirmed)
        {
            materials = materials.Where(m => m.Id != id).ToList();
            successMessage = "Materiale slettet.";
            errorMessage = null;
        }
        else
        {
            errorMessage = "Sletning fejlede.";
            successMessage = null;
        }
    }
}
