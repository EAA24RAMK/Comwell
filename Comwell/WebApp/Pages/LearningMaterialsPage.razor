@page "/learningmaterials"
@using Core.Models
@using WebApp.Services
@inject ILearningMaterialService MaterialService
@inject IStudentPlanService StudentPlanService
@inject IUserService UserService
@inject NavigationManager Nav

<h3>Læringsmateriale</h3>
<p></p>

@if (!string.IsNullOrEmpty(successMessage))
{
    <p style="color: green">@successMessage</p>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red">@errorMessage</p>
}

@if (currentUser?.Role == "HR" || currentUser?.Role == "Køkkenchef")
{
    <div class="section-card">
        <h4>Upload dokument</h4>
        <InputFile OnChange="HandleFileSelected" />
        <input type="text" @bind="uploadTitle" placeholder="Titel" class="form-control mt-2" />
        <select class="form-select mt-2" @bind="uploadSubtaskId">
            <option value="">Vælg delmål</option>
            @foreach (var s in subtasks)
            {
                <option value="@s.Id">@s.Text</option>
            }
        </select>
        <div class="filters mt-3">
            <button @onclick="UploadFile">Upload</button>
        </div>
    </div>

    <div class="section-card">
        <h4>Tilføj link</h4>
        <input type="text" @bind="linkTitle" placeholder="Titel" class="form-control" />
        <input type="text" @bind="linkUrl" placeholder="https://..." class="form-control mt-2" />
        <select class="form-select mt-2" @bind="linkSubtaskId">
            <option value="">Vælg delmål</option>
            @foreach (var s in subtasks)
            {
                <option value="@s.Id">@s.Text</option>
            }
        </select>
        <div class="filters mt-3">
            <button @onclick="AddLink">Tilføj link</button>
        </div>
    </div>
}

<h4>Materialer</h4>
@if (materials.Count == 0)
{
    <p>Ingen materialer endnu.</p>
}
else
{
    @foreach (var mat in materials.Where(m => !filteredSubtaskId.HasValue || m.SubtaskId == filteredSubtaskId))
    {
        var subtaskName = subtasks.FirstOrDefault(s => s.Id == mat.SubtaskId)?.Text ?? "Ukendt delmål";

        <div class="material-card">
            <div class="material-title">@mat.Title</div>
            <div class="material-subtask">Delmål: @subtaskName</div>

            @if (mat.IsLink)
            {
                <a href="@mat.LinkUrl" target="_blank">[Åbn link]</a>
            }
            else
            {
                <a href="@($"http://localhost:5079/api/LearningMaterial/download/{mat.FileId}")" target="_blank" download="@mat.FileName">[Download]</a>
            }

            @if (currentUser?.Role == "HR" || currentUser?.Role == "Køkkenchef")
            {
                <div class="filters material-delete">
                    <button @onclick="() => DeleteMaterial(mat.Id)">Slet</button>
                </div>
            }
        </div>
    }
}

@code {
    // Gemmer brugeren i en variabel
    private User? currentUser;
    
    private List<LearningMaterial> materials = new();
    private List<Subtask> subtasks = new();

    private IBrowserFile? selectedFile;
    private string uploadTitle = string.Empty;
    private int? uploadSubtaskId;

    private string linkTitle = string.Empty;
    private string linkUrl = string.Empty;
    private int? linkSubtaskId;

    private string? successMessage;
    private string? errorMessage;

    // Til at vise læringsmateriale
    private int? filteredSubtaskId;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUserAsync();
        var plans = await StudentPlanService.GetPlansByUserAsync(currentUser);
        var plan = plans.FirstOrDefault();

        if (plan != null)
            subtasks = plan.Goals.SelectMany(g => g.Subtasks).ToList();

        // Læs subtaskId direkte fra URL
        var uri = new Uri(Nav.Uri); //url hentes med Nav.Uri og laver den til et uri objekt
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query); //querystring bliver parset
        var subtaskIdString = query.Get("subtaskId");

        if (int.TryParse(subtaskIdString, out var sid)) // henter subtaskID, hvis den findes filtreres materials i markuppen (foreach løkken)
        {
            filteredSubtaskId = sid;
        }
        
        materials = await MaterialService.GetAllAsync();
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task UploadFile()
    {
        if (selectedFile == null || string.IsNullOrWhiteSpace(uploadTitle) || uploadSubtaskId is null)
        {
            errorMessage = "Udfyld titel, vælg fil og delmål.";
            return;
        }

        using var stream = selectedFile.OpenReadStream(long.MaxValue);
        var result = await MaterialService.UploadFileAsync(stream, selectedFile.Name, uploadTitle, uploadSubtaskId.Value);

        if (result != null)
        {
            materials.Add(result);
            uploadTitle = string.Empty;
            uploadSubtaskId = null;
            successMessage = "Fil uploadet!";
            errorMessage = null;
        }
        else
        {
            errorMessage = "Noget gik galt under upload.";
            successMessage = null;
        }
    }

    private async Task AddLink()
    {
        if (string.IsNullOrWhiteSpace(linkTitle) || string.IsNullOrWhiteSpace(linkUrl) || linkSubtaskId is null)
        {
            errorMessage = "Udfyld titel, link og vælg delmål.";
            return;
        }

        var link = new LearningMaterial
        {
            Title = linkTitle,
            SubtaskId = linkSubtaskId.Value,
            IsLink = true,
            LinkUrl = linkUrl
        };

        var result = await MaterialService.AddLinkAsync(link);
        if (result != null)
        {
            materials.Add(result);
            linkTitle = string.Empty;
            linkUrl = string.Empty;
            linkSubtaskId = null;
            successMessage = "Link tilføjet!";
            errorMessage = null;
        }
        else
        {
            errorMessage = "Kunne ikke tilføje link.";
            successMessage = null;
        }
    }

    private async Task DeleteMaterial(int id)
    {
        var confirmed = await MaterialService.DeleteAsync(id);
        if (confirmed)
        {
            materials = materials.Where(m => m.Id != id).ToList();
            successMessage = "Materiale slettet.";
            errorMessage = null;
        }
        else
        {
            errorMessage = "Sletning fejlede.";
            successMessage = null;
        }
    }
}
