@page "/"
@inject WebApp.Services.IUserService UserService
@inject WebApp.Services.IStudentPlanService StudentPlanService
@using Core.Models

<h1 class="page-title">Oversigt</h1>

@if (isCheckingUser)
{
    <p>Indlæser...</p>
}
else if (!isLoggedIn)
{
    <p class="access-denied"><strong>Log venligst ind for at tilgå portalen.</strong></p>
}
else
{
    <p class="welcome-text">Velkommen tilbage, @userName. Her er din samlede oversigt.</p>

    <div class="goal-grid">
        <div class="goal-card total">
            <div class="goal-icon icon-green">
                <i class="fas fa-chart-line"></i>
            </div>
            <div class="goal-content">
                <span class="goal-label">Mål i alt</span>
                <span class="goal-value">@goals.Count()</span>
            </div>
        </div>

        <div class="goal-card completed">
            <div class="goal-icon icon-beige">
                <i class="fas fa-check-circle"></i>
            </div>
            <div class="goal-content">
                <span class="goal-label">Færdigt</span>
                <span class="goal-value">@goals.Count(g => g.Status == "Fuldført")</span>
            </div>
        </div>

        <div class="goal-card in-progress">
            <div class="goal-icon icon-orange">
                <i class="fas fa-spinner"></i>
            </div>
            <div class="goal-content">
                <span class="goal-label">I gang</span>
                <span class="goal-value">@goals.Count(g => g.Status == "I gang")</span>
            </div>
        </div>

        <div class="goal-card attention">
            <div class="goal-icon icon-dark">
                <i class="fas fa-exclamation-circle"></i>
            </div>
            <div class="goal-content">
                <span class="goal-label">Vær opmærksom på</span>
                <span class="goal-value">@goals.Count(g => g.Status == "Vær opmærksom på")</span>
            </div>
        </div>
    </div>
}

@code {
    private string userName = "gæst";
    private List<Goal> goals = new();
    private bool isLoggedIn = false;
    private bool isCheckingUser = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadGoals();
    }

    private async Task LoadGoals()
    {
        try
        {
            var currentUser = await UserService.GetCurrentUserAsync();
            if (currentUser != null)
            {
                isLoggedIn = true;
                userName = currentUser.Name ?? currentUser.Email ?? "bruger";
                var plans = await StudentPlanService.GetPlansByUserAsync(currentUser);
                goals = plans.SelectMany(p => p.Goals).ToList();
            }
        }
        finally
        {
            isCheckingUser = false;
        }
    }
}
