@page "/users"
@using Core.Models
@using WebApp.Services
@inject IUserService UserService
@inject IJSRuntime JS
@inject NavigationManager Nav

<h3>Brugere</h3>

<div class="filters">
    <input type="text" @bind="searchTerm" @bind:event="oninput" placeholder="Søg efter bruger..." />
    <select @bind="selectedRole">
        <option value="">Alle roller</option>
        @foreach (var role in roles)
        {
            <option value="@role">@role</option>
        }
    </select>
    <select @bind="selectedHotel">
        <option value="">Alle lokationer</option>
        @foreach (var hotel in hotels)
        {
            <option value="@hotel">@hotel</option>
        }
    </select>
    @if (currentUser?.Role == "HR")
    {
        <button @onclick="CreateUser">+ Tilføj bruger</button>
    }
</div>

<div class="user-list">
    <!-- Header -->
    <div class="user-card user-header">
        <div></div> <!-- Avatar placeholder -->
        <div class="header-label">Bruger</div>
        <div class="header-label">Skole</div>
        <div class="header-label">Lokation</div>
        <div class="header-label">Status</div>
        <div></div>
    </div>

    <!-- Brugere -->
    @foreach (var user in FilteredUsers)
    {
        <div class="user-card">
            <div class="avatar">@GetInitials(user.Name)</div>

            <div class="user-info">
                <div class="user-name">@user.Name</div>
                <div class="user-role">@user.Role</div>
            </div>

            <div class="user-school">
                @if (!string.IsNullOrWhiteSpace(user.SchoolType))
                {
                    @user.SchoolType
                }
                else
                {
                    <span>-</span>
                }
            </div>

            <div class="user-location">
                @if (!string.IsNullOrWhiteSpace(user.Hotel))
                {
                    @user.Hotel
                }
                else
                {
                    <span>-</span>
                }
            </div>

            <div class="user-status @(user.Status == "Aktiv" ? "active" : "inactive")">
                @user.Status
            </div>

            <div class="user-actions">
                <button @onclick="() => ToggleActionMenu(user.Id)">⋮</button>
                @if (activeActionMenuUserId == user.Id)
                {
                    <div class="action-menu">
                        <button class="action-button" @onclick="() => ToggleUserStatusAsync(user)">
                            @(user.Status == "Aktiv" ? "Gør inaktiv" : "Gør aktiv")
                        </button>
                        <button class="action-button delete-button" @onclick="() => DeleteUserAsync(user.Id)">
                            Slet
                        </button>
                    </div>
                }
            </div>
        </div>
    }

</div>

@if (showCreateModal)
{
    <div class="modal-background">
        <div class="modal-box">
            <h5>Opret ny bruger</h5>
            <input @bind="newUser.Name" placeholder="Navn" />
            <input @bind="newUser.Email" placeholder="Email" />
            <input @bind="newUser.Password" placeholder="Adgangskode" type="password" />
            <input @bind="newUser.Hotel" placeholder="Hotel" />

            <select @bind="newUser.Role">
                <option disabled selected>Vælg rolle</option>
                <option value="Elev">Elev</option>
                <option value="HR">HR</option>
                <option value="Køkkenchef">Køkkenchef</option>
                <option value="Kok">Kok</option>
            </select>

            <select @bind="newUser.Status">
                <option disabled selected value="">Vælg status</option>
                <option value="Aktiv">Aktiv</option>
                <option value="Inaktiv">Inaktiv</option>
            </select>

            @if (newUser.Role == "Elev")
            {
                <select @bind="newUser.SchoolType">
                    <option disabled selected value="">Vælg skole</option>
                    <option value="EUX">EUX</option>
                    <option value="EUV">EUV</option>
                    <option value="Voksenelev">Voksenelev</option>
                    <option value="Ordinær">Ordinær</option>
                </select>
            }

            <button @onclick="SaveUserAsync">Gem</button>
            <button @onclick="CloseCreateModal">Luk</button>

            <p>@createMessage</p>
        </div>
    </div>
}

@code {
    private List<User> users = new();
    private string searchTerm = "";
    private string selectedRole = "";
    private string selectedHotel = "";
    private bool showCreateModal = false;
    private User newUser = new();
    private string createMessage = "";
    private User? currentUser;
    private int? activeActionMenuUserId = null;

    private List<string> roles = new() { "Elev", "Køkkenchef", "HR", "Kok" };
    private List<string> hotels = new();

    private IEnumerable<User> FilteredUsers =>
        users
            .Where(u =>
                (string.IsNullOrEmpty(searchTerm) || u.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(selectedRole) || u.Role == selectedRole) &&
                (string.IsNullOrEmpty(selectedHotel) || u.Hotel == selectedHotel)
            );

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAllUsersAsync();

        hotels = users
            .Select(u => u.Hotel)
            .Distinct()
            .OrderBy(h => h)
            .ToList();

        currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser != null && currentUser.Role == "Elev")
        {
            Nav.NavigateTo("/");
        }
    }

    private void CreateUser()
    {
        showCreateModal = true;
        newUser = new();
        createMessage = "";
    }

    private void CloseCreateModal()
    {
        showCreateModal = false;
    }

    private async Task SaveUserAsync()
    {
        var result = await UserService.CreateUserAsync(newUser);
        if (result != null)
        {
            createMessage = "Bruger oprettet!";
            users = await UserService.GetAllUsersAsync();
            showCreateModal = false;
        }
        else
        {
            createMessage = "Noget gik galt under oprettelsen";
        }
    }

    private async Task DeleteUserAsync(int userId)
    {
        if (currentUser == null || currentUser.Role == "Elev") return;

        var success = await UserService.DeleteUserAsync(userId);

        if (success)
        {
            users = await UserService.GetAllUsersAsync();
        }

        activeActionMenuUserId = null;
    }

    private void ToggleActionMenu(int userId)
    {
        activeActionMenuUserId = activeActionMenuUserId == userId ? null : userId;
    }

    private string GetInitials(string fullName)
    {
        var parts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return parts.Length switch
        {
            0 => "",
            1 => parts[0][0].ToString().ToUpper(),
            _ => $"{parts[0][0]}{parts[^1][0]}".ToUpper()
        };
    }
    
    private async Task ToggleUserStatusAsync(User user)
    {
        var newStatus = user.Status == "Aktiv" ? "Inaktiv" : "Aktiv";
        var success = await UserService.UpdateUserStatusAsync(user.Id, newStatus);

        if (success)
        {
            users = await UserService.GetAllUsersAsync();
        }

        activeActionMenuUserId = null;
    }
}
