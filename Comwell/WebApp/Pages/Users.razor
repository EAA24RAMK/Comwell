@page "/users"
@using Core.Models
@using WebApp.Services
@inject IUserService UserService

<h3>Brugere</h3>

<div class="filters">
    <input type="text" @bind="searchTerm" @bind:event="oninput" placeholder="S√∏g efter bruger..." />
    <select @bind="selectedRole">
        <option value="">Alle roller</option>
        @foreach (var role in roles)
        {
            <option value="@role">@role</option>
        }
    </select>
    <select @bind="selectedHotel">
        <option value="">Alle lokationer</option>
        @foreach (var hotel in hotels)
        {
            <option value="@hotel">@hotel</option>
        }
    </select>
    <button @onclick="CreateUser">+ Tilf√∏j bruger</button>
</div>

<table>
    <thead>
        <tr>
            <th>Bruger</th>
            <th>Lokation</th>
            <th>Status</th>
            <th>Fremskridt</th>
            <th>Handling</th> @* Ny kolonne *@
        </tr>
    </thead>
    <tbody>
        @foreach (var user in FilteredUsers)
        {
            <tr>
                <td>@user.Name (@user.Role)</td>
                <td>@user.Hotel</td>
                <td>@user.Status</td>
                <td>-</td>
                <td>
                    <button @onclick="() => DeleteUserAsync(user.Id)">üóëÔ∏è Slet</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (showCreateModal)
{
    <div class="modal-background">
        <div class="modal-box">
            <h3>Opret ny bruger</h3>
            <input @bind="newUser.Name" placeholder="Navn" />
            <input @bind="newUser.Email" placeholder="Email" />
            <input @bind="newUser.Password" placeholder="Adgangskode" type="password" />
            <input @bind="newUser.Hotel" placeholder="Hotel" />

            <select @bind="newUser.Role">
                <option disabled selected>V√¶lg rolle</option>
                <option value="Elev">Elev</option>
                <option value="HR">HR</option>
                <option value="K√∏kkenchef">K√∏kkenchef</option>
                <option value="Afdelingsleder">Afdelingsleder</option>
            </select>

            <select @bind="newUser.Status">
                <option disabled selected value="">V√¶lg status</option>
                <option value="Aktiv">Aktiv</option>
                <option value="Inaktiv">Inaktiv</option>
            </select>

            <button @onclick="SaveUserAsync">Gem</button>
            <button @onclick="CloseCreateModal">Luk</button>

            <p>@createMessage</p>
        </div>
    </div>
}

@code {
    private List<User> users = new();
    private string searchTerm = "";
    private string selectedRole = "";
    private string selectedHotel = "";
    private bool showCreateModal = false;
    private User newUser = new();
    private string createMessage = "";

    private List<string> roles = new() { "Elev", "K√∏kkenchef", "HR", "Afdelingsleder" };
    private List<string> hotels = new();

    private IEnumerable<User> FilteredUsers =>
        users
            .Where(u =>
                (string.IsNullOrEmpty(searchTerm) || u.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(selectedRole) || u.Role == selectedRole) &&
                (string.IsNullOrEmpty(selectedHotel) || u.Hotel == selectedHotel)
            );

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAllUsersAsync();

        hotels = users
            .Select(u => u.Hotel)
            .Distinct()
            .OrderBy(h => h)
            .ToList();
    }

    private void CreateUser()
    {
        showCreateModal = true;
        newUser = new();
        createMessage = "";
    }

    private void CloseCreateModal()
    {
        showCreateModal = false;
    }

    private async Task SaveUserAsync()
    {
        var result = await UserService.CreateUserAsync(newUser);
        Console.WriteLine($"Navn: {newUser.Name}, Email: {newUser.Email}, Rolle: {newUser.Role}, Hotel: {newUser.Hotel}, Status: {newUser.Status}, Password: {newUser.Password}");
        if (result != null)
        {
            createMessage = "Bruger oprettet!";
            users = await UserService.GetAllUsersAsync(); // Opdaterer listen
            showCreateModal = false;
        }
        else
        {
            createMessage = "Noget gik galt under oprettelsen";
        }
    }

    private async Task DeleteUserAsync(int userId)
    {
        var success = await UserService.DeleteUserAsync(userId);
        if (success)
        {
            users = await UserService.GetAllUsersAsync(); // Opdater listen
        }
        else
        {
            Console.WriteLine("Kunne ikke slette bruger");
        }
    }
}