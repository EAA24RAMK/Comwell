@page "/opret-plan"
@using Core.Models
@using WebApp.Services
@inject IStudentPlanService StudentPlanService
@inject IUserService UserService
@inject ITemplateService TemplateService
@inject NavigationManager Nav

<!-- Side til oprettelse af elevplaner -->
<div class="page-container">
    <h3 class="form-title">Opret plan</h3>

    <!-- Viser feedbackbesked hvis der er en -->
    @if (!string.IsNullOrEmpty(feedbackMessage))
    {
        <p>@feedbackMessage</p>
    }

    <!-- Formular til oprettelse af elevplan -->
    <EditForm Model="planModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />  <!-- Aktiverer validering baseret på datamodellen -->
        <ValidationSummary />         <!-- Viser evt. valideringsfejl samlet -->

        <div class="form-group">
            <label>Vælg elev:</label>
            <select @bind="planModel.StudentId">
                <option value="">Vælg en elev</option>
                @foreach (var user in students)
                {
                    <option value="@user.Id">@user.Name</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label>Vælg skabelon:</label>
            <select @bind="planModel.TemplateId" @bind:after="OnTemplateChanged">
                <option value="">Vælg en skabelon</option>
                @foreach (var template in templates)
                {
                    <option value="@template.Id">@template.Title</option>
                }
            </select>
        </div>
        
        <div class="form-group">
            <label>Startdato:</label>
            <InputDate @bind-Value="planModel.PeriodStart" />
        </div>

        <!-- Gem knap -->
        <button type="submit">Gem plan</button>
    </EditForm>
</div>

@code {
    private string feedbackMessage = "";        // Besked til brugeren efter handling
    private List<User> students = new();        // Liste over elever
    private List<Template> templates = new();   // Liste over skabeloner
    private User? currentUser;                  // Den bruger der er logget ind
    
    
    // Model for elevplan der skal oprettes
    private StudentPlan planModel = new()
    {
        PeriodStart = DateTime.Today
    };
    
    // Formål: Henter lister over elever og skabeloner når siden indlæses.
    // Sørger også for, at elever omdirigeres til forsiden, da de ikke må oprette planer.
    protected override async Task OnInitializedAsync()
    {
        var allUsers = await UserService.GetAllUsersAsync();
        students = allUsers.Where(u => u.Role == "Elev").ToList();
        templates = await TemplateService.GetAllTemplatesAsync();
        
        currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser != null && currentUser.Role == "Elev")
        {
            Nav.NavigateTo("/");
        }
    }
    
    // Formål: Når en skabelon vælges i dropdown-menuen, henter denne metode den valgte TemplateId
    // fra databasen og kalder ApplyTemplateGoalsToPlan for at tilføje skabelonens mål til elevplanen.
    private async Task OnTemplateChanged()
    {
        if (planModel.TemplateId > 0)
        {
            var selectedTemplate = await TemplateService.GetTemplateByIdAsync(planModel.TemplateId);
            if (selectedTemplate != null)
            {
                await ApplyTemplateGoalsToPlan(selectedTemplate);
            }
        }
    }

    // Parametre: selectedTemplate – Skabelonen som målene skal kopieres fra.
    // Formål: Kopierer målene fra skabelonen over i elevplanen. Justerer deadlines, så de passer
    // i forhold til den startdato der er valgt på planen.
    private async Task ApplyTemplateGoalsToPlan(Template selectedTemplate)
    {
        // Finder deadline på det første mål i skabelonen.
        // Denne dato bruges som referencepunkt til at beregne alle andre deadlines.
        var referenceDate = selectedTemplate.Goals.First().Deadline;
        var start = planModel.PeriodStart;  // Henter startdatoen som brugeren har valgt for planen.
        
        // Gennemløber alle mål i skabelonen og justerer deres deadlines.
        var adjustedGoals = selectedTemplate.Goals.Select(goal =>
        {
            var dayOffset = (goal.Deadline - referenceDate).Days; // Udregner forskydningen i antal dage mellem det nuværende mål og referencepunktet.
            return new Goal // Opretter en kopi af målet, men justerer deadline, så det passer til startdatoen.
            {
                Id = goal.Id,
                Title = goal.Title,
                Category = goal.Category,
                Deadline = start.AddDays(dayOffset),
                Status = "Ikke startet",
                InitiatedBy = goal.InitiatedBy,
                CheckedOff = false,
                Subtasks = goal.Subtasks.ToList()
            };
        }).ToList();

        planModel.Goals = adjustedGoals; // Tildeler den opdaterede liste af mål til planen.
        planModel.PeriodEnd = adjustedGoals.Max(g => g.Deadline); // Finder den seneste deadline blandt alle mål og sætter det som planens slutdato.
    }

    // Formål: Gemmer den oprettede elevplan i databasen.
    // Hvis brugeren ikke har valgt en elev og/eller skabelon, vises en fejlbesked.
    // Når planen er gemt sendes brugeren til elevplansiden.
    private async Task HandleSubmit()
    {
        if (planModel.TemplateId == 0 && planModel.StudentId == 0)
        {
            feedbackMessage = "Du mangler at udfylde elev og skabelon";
            return;
        }
        
        if (planModel.StudentId == 0)
        {
            feedbackMessage = "Du skal vælge en elev.";
            return;
        }
        
        if (planModel.TemplateId == 0)
        {
            feedbackMessage = "Du skal vælge en skabelon";
            return;
        }
        
        planModel.CreatedBy = (await UserService.GetCurrentUserAsync())?.Name ?? "Ukendt";
        planModel.PeriodStart = planModel.PeriodStart.Date;

        await StudentPlanService.CreateStudentPlanAsync(planModel);
        Nav.NavigateTo("/elevplaner");
    }
}
