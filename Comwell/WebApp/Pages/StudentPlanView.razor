@page "/elevplaner"
@using WebApp.Services
@using WebApp.Components
@using Core.Models
@inject IStudentPlanService StudentPlanService
@inject IUserService UserService
@inject ITemplateService TemplateService
@inject ILearningMaterialService MaterialService
@inject NavigationManager Nav

<h3>Elevplaner</h3>
<p class="welcome-text">Her er et samlet overblik over alle elevplaner.</p>

<div class="mb-3 d-flex gap-3">
    <div>
        <select @onchange="OnHotelChanged" class="form-select">
            <option value="">Alle hoteller</option>
            @foreach (var hotel in allHotels)
            {
                <option value="@hotel" selected="@(hotel == selectedHotel)">
                    @hotel
                </option>
            }
        </select>
    </div>
    <div>
        <select @onchange="OnStudentChanged" class="form-select">
            <option value="-1">Alle elever</option>
            @foreach (var user in allUsers.Where(u => u.Role == "Elev" && (string.IsNullOrEmpty(selectedHotel) || u.Hotel == selectedHotel)))
            {
                <option value="@user.Id" selected="@(user.Id == selectedStudentId)">
                    @user.Name (@user.Hotel)
                </option>
            }
        </select>
    </div>
</div>


@if (plans == null || !plans.Any())
{
    <p>Ingen planer fundet.</p>
}
else
{
    @foreach (var plan in FilteredPlans())
    {
        <div class="plan-box" style="margin-bottom: 2rem; border: 1px solid #ccc; padding: 1rem;">
            <h4>@templates.FirstOrDefault(t => t.Id == plan.TemplateId)?.Title</h4>
            <!-- tre prikker til at slette studentplan -->
            <div class="plan-actions" style="position: absolute; top: 0.5rem; right: 0.5rem;">
                <button @onclick="() => ToggleActionMenu(plan.Id)">⋮</button>
                @if (activeActionMenuPlanId == plan.Id)
                {
                    <div class="action-menu">
                        <button class="delete-button" @onclick="() => DeleteStudentPlanAsync(plan.Id)">Slet</button>
                    </div>
                }
            </div>
            <p><strong>Elev:</strong> @userNamesById.GetValueOrDefault(plan.StudentId, "(Ukendt)")</p>
            <p><strong>Oprettet af:</strong> @plan.CreatedBy</p>
            <p><strong>Periode:</strong> @plan.PeriodStart.ToShortDateString() - @plan.PeriodEnd.ToShortDateString()</p>

            @if (currentUser?.Role == "Køkkenchef" && !plan.IsApprovedByChef)
            {
                <button @onclick="() => ApprovePlan(plan)">
                    Godkend praktikperiode
                </button>
            }
            else if (plan.IsApprovedByChef)
            {
                <p class="text-success mt-2">✔ Praktikperiode godkendt af køkkenchef</p>
            }


            <button class="fold-toggle" @onclick="() => TogglePlan(plan.Id)">
                Mål @if (openPlanIds.Contains(plan.Id)) { <span>▼</span> } else { <span>▶</span> }
            </button>

            @if (openPlanIds.Contains(plan.Id))
            {
                @foreach (var goal in plan.Goals)
                {
                  <GoalDisplay goal="goal" plans="plans" plan="plan" allMaterials="allMaterials"></GoalDisplay>
                }

                <button class="bi bi-plus" @onclick="() => StartAddingNewGoal(plan.Id)"> Tilføj nyt mål</button>

                @if (newGoalPlanId == plan.Id)
                {
                    <div style="margin-left: 1rem; margin-top: 1rem; border-top: 1px dashed #aaa; padding-top: 1rem;">
                        <h5>Nyt mål</h5>
                        <label>Titel:</label>
                        <InputText @bind-Value="newGoalTitle" />

                        <label>Kategori:</label>
                        <select @bind="newGoalCategory">
                            <option value="Skole">Skole</option>
                            <option value="Praktik">Praktik</option>
                        </select>

                        <button class="bi bi-plus" @onclick="() => ConfirmAddGoal(plan)"> Tilføj</button>
                        <button @onclick="CancelAddGoal">Annuller</button>
                    </div>
                }
            }

            @foreach (var school in plan.SchoolPeriods)
            {
                <div class="mb-4 p-3 border rounded" style="margin-top: 2rem;">
                    <h5>@school.Title</h5>

                    <label>Startdato:</label>
                    @if (!school.IsDateConfirmed)
                    {
                        <label>Startdato:</label>
                        <InputDate @bind-Value="school.StartDate" class="form-control mb-2" />

                        <button
                                @onclick="() => SaveSchoolPeriodDate(plan, school)">
                            Gem dato
                        </button>
                    }
                    else
                    {
                        @if (school.StartDate.HasValue)
                        {
                            var start = school.StartDate.Value;
                            var end = start.AddDays(7 * school.DurationWeeks);
                            <p><strong>Dato:</strong> @start.ToString("dd.MM.yyyy") - @end.ToString("dd.MM.yyyy")</p>
                        }
                        else
                        {
                            <p><strong>Dato:</strong> Ikke angivet</p>
                        }
                    }

                    <ul>
                        <li class="d-flex align-items-center gap-2">
                         
                            @if (currentUser?.Role == "Køkkenchef" && !school.IsApproved)
                            {
                                <button @onclick="() => ApproveSchoolPeriod(plan, school)">
                                    Godkend skoleperiode
                                </button>
                            }
                            else if (school.IsApproved)
                            {
                                <p class="text-success mt-2">✔ Skoleperiode godkendt af køkkenchef</p>
                            }

                            @if (school.Status == "Ikke startet")
                            {
                                <span class="badge bg-secondary">Ikke startet</span>
                            }
                            else if (school.Status == "I gang")
                            {
                                <span class="badge bg-warning text-dark">I gang</span>
                            }
                            else if (school.Status == "Fuldført")
                            {
                                <span class="badge bg-success">Fuldført</span>
                            }
                        </li>
                    </ul>
                </div>
            }
            
            <h5>
                <button class="btn fold-toggle" @onclick="() => ToggleNotes(plan.Id)">
                    Noter @if (openNotePlanIds.Contains(plan.Id)) { <span>▼</span> } else { <span>▶</span> }
                </button>
            </h5>

            @if (openNotePlanIds.Contains(plan.Id))
            {
                @foreach (var note in plan.Notes)
                {
                    <div>
                        <em>@note.CreatedAt.ToShortDateString()</em>: @note.Text
                        <button class="btn btn-sm btn-outline-danger ms-2" @onclick="() => DeleteNote(plan, note.Id)">Slet</button>
                    </div>
                }

                @if (addingNoteForPlanId == plan.Id)
                {
                    <div>
                        <textarea class="form-control mb-2"
                                  @oninput="e => newNoteTexts[plan.Id] = e.Value?.ToString() ?? string.Empty">
                            @newNoteTexts.GetValueOrDefault(plan.Id, string.Empty)
                        </textarea>
                        <button @onclick="() => SaveNote(plan)">Gem note</button>
                        <button @onclick="CancelAddNote">Annuller</button>
                    </div>
                }
                else
                {
                    <button class="bi bi-plus" @onclick="() => StartAddNote(plan.Id)">
                        Tilføj note
                    </button>
                }
            }
        </div>
    }
}

@code {
    private List<StudentPlan> plans = new();
    private List<Template> templates = new();
    private User? currentUser;
    private HashSet<int> openPlanIds = new();
    private HashSet<int> openNotePlanIds = new();
    private Dictionary<int, string> userNamesById = new();

    private int editingGoalId = -1;
    private string editableGoalTitle = "";
    private string editableGoalCategory = "";

    private int newGoalPlanId = -1;
    private string newGoalTitle = "";
    private string newGoalCategory = "";
    
    //hent alle brugere og lav lister til dropdowns
    private List<User> allUsers = new();
    private List<string> allHotels = new();
    private int selectedStudentId = -1;
    private string selectedHotel = "";
    
    private int addingNoteForPlanId = -1;
    private Dictionary<int, string> newNoteTexts = new();
    
    // tre prikker til slet knappen
    private int activeActionMenuPlanId = -1;
    
    private List<LearningMaterial> allMaterials = new();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser is null) return;
        
        // Hvis rolle ikke er HR, kok eller køkkenchef ingen adgang
        if (currentUser == null || (currentUser.Role != "HR" && currentUser.Role != "Køkkenchef" && currentUser.Role != "Kok"))
        {
            Nav.NavigateTo("/");
        }
        
        allUsers = await UserService.GetAllUsersAsync();
        allHotels = allUsers
            .Where(u => !string.IsNullOrWhiteSpace(u.Hotel))
            .Select(u => u.Hotel)
            .Distinct()
            .OrderBy(h => h)
            .ToList();

        plans = await StudentPlanService.GetPlansByUserAsync(currentUser);
        allMaterials = await MaterialService.GetAllAsync();
        templates = await TemplateService.GetAllTemplatesAsync();
        
        foreach (var plan in plans)
        {
            // Bevar eksisterende funktionalitet
            if (!userNamesById.ContainsKey(plan.StudentId))
            {
                var user = await UserService.GetUserByIdAsync(plan.StudentId);
                userNamesById[plan.StudentId] = user?.Name ?? "(Ukendt)";
            }
            
            bool updated = false;
            foreach (var school in plan.SchoolPeriods)
            {
                if (school.Status == "Ikke startet" && school.StartDate <= DateTime.Today)
                {
                    school.Status = "I gang";
                    updated = true;
                }
            }

            if (updated)
            {
                await StudentPlanService.UpdateStudentPlanAsync(plan);
            }
        }
    }

    private void TogglePlan(int planId)
    {
        if (!openPlanIds.Add(planId))
            openPlanIds.Remove(planId);
    }
    
    private void ToggleNotes(int planId)
    {
        if (!openNotePlanIds.Add(planId))
            openNotePlanIds.Remove(planId);
    }
    
    /* flyttet til component
    private string GetGoalStatusText(Goal goal)
    {
        int total = goal.Subtasks.Count;
        int completed = goal.Subtasks.Count(s => s.Status == "Fuldført");

        if (total == 0) return "Ingen delopgaver";
        if (completed == 0) return "Ikke startet";
        if (completed == total) return "Fuldført";
        return $"{completed}/{total} fuldført";
    }
    */

    private void StartAddingNewGoal(int planId)
    {
        newGoalPlanId = planId;
        newGoalTitle = "";
        newGoalCategory = "";
    }

    private void CancelAddGoal()
    {
        newGoalPlanId = -1;
        newGoalTitle = "";
        newGoalCategory = "";
    }

    private async Task ConfirmAddGoal(StudentPlan plan)
    {
        var planToUpdate = plans.FirstOrDefault(p => p.Id == plan.Id);
        if (planToUpdate == null) return;

        var newGoalId = planToUpdate.Goals.Any() ? planToUpdate.Goals.Max(g => g.Id) + 1 : 1;

        var newGoal = new Goal
        {
            Id = newGoalId,
            Title = newGoalTitle,
            Category = newGoalCategory,
            Subtasks = new List<Subtask>(),
            Status = "Ikke startet"
        };

        planToUpdate.Goals.Add(newGoal);
        await StudentPlanService.UpdateStudentPlanAsync(planToUpdate);
        CancelAddGoal();
        plans = await StudentPlanService.GetPlansByUserAsync(currentUser!);
    }
    
    // Filtrer planer baseret på dropdowns
    private IEnumerable<StudentPlan> FilteredPlans()
    {
        IEnumerable<StudentPlan> filtered = plans;

        if (!string.IsNullOrEmpty(selectedHotel))
        {
            var studentIds = allUsers
                .Where(u => u.Role == "Elev" && u.Hotel == selectedHotel)
                .Select(u => u.Id)
                .ToHashSet();
            filtered = filtered.Where(p => studentIds.Contains(p.StudentId));
        }

        if (selectedStudentId != -1)
        {
            filtered = filtered.Where(p => p.StudentId == selectedStudentId);
        }

        return filtered;
    }

    private void OnHotelChanged(ChangeEventArgs e)
    {
        selectedHotel = e.Value?.ToString() ?? "";
        selectedStudentId = -1; // Nulstil elevvalg når hotel skiftes
    }

    private void OnStudentChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var id))
            selectedStudentId = id;
        else
            selectedStudentId = -1;
    }
    
    private void StartAddNote(int planId)
    {
        addingNoteForPlanId = planId;
        if (!newNoteTexts.ContainsKey(planId))
        {
            newNoteTexts[planId] = string.Empty;
        }
    }

    private void CancelAddNote()
    {
        addingNoteForPlanId = -1;
    }

    private async Task SaveNote(StudentPlan plan)
    {
        if (!newNoteTexts.TryGetValue(plan.Id, out var noteText) || string.IsNullOrWhiteSpace(noteText))
            return;

        var newNote = new Note
        {
            Id = plan.Notes.Any() ? plan.Notes.Max(n => n.Id) + 1 : 1,
            Text = noteText.Trim(),
            CreatedAt = DateTime.Now
        };

        plan.Notes.Add(newNote);
        await StudentPlanService.UpdateStudentPlanAsync(plan);

        newNoteTexts[plan.Id] = string.Empty;
        addingNoteForPlanId = -1;
        StateHasChanged();
    }
    
    private async Task DeleteNote(StudentPlan plan, int noteId)
    {
        var planToUpdate = plans.FirstOrDefault(p => p.Id == plan.Id);
        if (planToUpdate == null) return;

        planToUpdate.Notes.RemoveAll(n => n.Id == noteId);

        await StudentPlanService.UpdateStudentPlanAsync(planToUpdate);

        // Opdater viewet
        plans = await StudentPlanService.GetPlansByUserAsync(currentUser!);
    }
    
    // sletter en hel studentplan
    private async Task DeleteStudentPlanAsync(int planId)
    {
        var success = await StudentPlanService.DeleteStudentPlanAsync(planId);
        if (success)
        {
            plans = await StudentPlanService.GetPlansByUserAsync(currentUser!);
        }
    }
    
    // tre prikker til slet knappen
    private void ToggleActionMenu(int planId)
    {
        activeActionMenuPlanId = activeActionMenuPlanId == planId ? -1 : planId;
    }
    

        private StudentPlan studentPlan;

        private async Task ApprovePlan(StudentPlan plan)
        {
            await StudentPlanService.ApprovePlanByChefAsync(plan.Id);
            plan.IsApprovedByChef = true;
        }
        
        private async Task ApproveSchoolPeriod(StudentPlan plan, SchoolPeriod school)
        {
            school.IsApproved = true;
            school.Status = "Fuldført";
            await StudentPlanService.UpdateStudentPlanAsync(plan);
            plans = await StudentPlanService.GetPlansByUserAsync(currentUser!);
        }
        
        private async Task SaveSchoolPeriodDate(StudentPlan plan, SchoolPeriod school)
        {
            var index = plan.SchoolPeriods.FindIndex(sp => sp.Id == school.Id);
            if (index == -1) return;

            var targetSchool = plan.SchoolPeriods[index];

            if (targetSchool.StartDate <= DateTime.Today && targetSchool.Status == "Ikke startet")
            {
                targetSchool.Status = "I gang";
            }

            targetSchool.IsDateConfirmed = true;

            await StudentPlanService.UpdateStudentPlanAsync(plan);
            StateHasChanged();
        }

}
