@page "/elevplaner"
@using WebApp.Services
@inject IStudentPlanService StudentPlanService
@using Core.Models
@inject IUserService UserService

<h3>Elevplan</h3>

@if (plans == null || !plans.Any())
{
    <p>Ingen planer fundet.</p>
}
else
{
    @foreach (var plan in plans)
    {
        <div class="plan-box" style="margin-bottom: 2rem; border: 1px solid #ccc; padding: 1rem;">
            <h4>@plan.Title</h4>
            <p><strong>Oprettet af:</strong> @plan.CreatedBy</p>
            <p><strong>Periode:</strong> @plan.PeriodStart.ToShortDateString() - @plan.PeriodEnd.ToShortDateString()</p>

            <button class="fold-toggle" @onclick="() => TogglePlan(plan.Id)">
                M√•l @if (openPlanIds.Contains(plan.Id)) { <span>‚ñº</span> } else { <span>‚ñ∂</span> }
            </button>

            @if (openPlanIds.Contains(plan.Id))
            {
                @foreach (var goal in plan.Goals)
                {
                    <div style="margin-left: 1rem; margin-bottom: 1rem;">
                        <button class="fold-toggle" @onclick="() => ToggleGoal(goal.Id)">
                            <strong>@goal.Title</strong> - @goal.Status (@goal.Category)
                            @if (openGoalIds.Contains(goal.Id)) { <span>‚ñº</span> } else { <span>‚ñ∂</span> }
                        </button>

                        @if (openGoalIds.Contains(goal.Id))
                        {
                            @if (editingGoalId == goal.Id)
                            {
                                <ul>
                                    @for (int i = 0; i < editableSubtasks.Count; i++)
                                    {
                                        var index = i;
                                        <li @key="index">
                                            <input value="@editableSubtasks[index]" 
                                                   @oninput="e => editableSubtasks[index] = e.Value?.ToString() ?? string.Empty" />
                                            <button @onclick="() => RemoveSubtask(index)">‚ùå</button>
                                        </li>
                                    }
                                </ul>
                                <button @onclick="() => SaveSubtasks(plan, goal)">üìÉ Gem √¶ndringer</button>
                                <button @onclick="CancelEditing">Annuller</button>
                            }
                            else
                            {
                                <ul>
                                    @foreach (var subtask in goal.Subtasks)
                                    {
                                        <li>@subtask</li>
                                    }
                                </ul>
                                <button @onclick="() => StartEditing(goal)">‚úèÔ∏è Rediger</button>
                            }
                        }
                    </div>
                }
            }

            <h5>Noter</h5>
            @foreach (var note in plan.Notes)
            {
                <div>
                    <em>@note.CreatedAt.ToShortDateString()</em>: @note.Text
                </div>
            }

            <hr />
        </div>
    }
}

@code {
    private List<StudentPlan> plans = new();
    private User? currentUser;
    private HashSet<int> openPlanIds = new();
    private HashSet<int> openGoalIds = new();
    private int editingGoalId = -1;
    private List<string> editableSubtasks = new();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser is null) return;

        plans = await StudentPlanService.GetPlansByUserAsync(currentUser);
    }

    private void TogglePlan(int planId)
    {
        if (!openPlanIds.Add(planId))
            openPlanIds.Remove(planId);
    }

    private void ToggleGoal(int goalId)
    {
        if (!openGoalIds.Add(goalId))
            openGoalIds.Remove(goalId);
    }

    private void StartEditing(Goal goal)
    {
        editingGoalId = goal.Id;
        editableSubtasks = new(goal.Subtasks);
    }

    private void CancelEditing()
    {
        editingGoalId = -1;
        editableSubtasks.Clear();
    }

    private void RemoveSubtask(int index)
    {
        if (index >= 0 && index < editableSubtasks.Count)
        {
            editableSubtasks.RemoveAt(index);
        }
    }

    private async Task SaveSubtasks(StudentPlan plan, Goal goal)
    {
        var planToUpdate = plans.FirstOrDefault(p => p.Id == plan.Id);
        if (planToUpdate == null) return;

        var goalToUpdate = planToUpdate.Goals.FirstOrDefault(g => g.Id == goal.Id);
        if (goalToUpdate == null) return;

        goalToUpdate.Subtasks = editableSubtasks.ToList();

        await StudentPlanService.UpdateStudentPlanAsync(planToUpdate);

        editingGoalId = -1;
        editableSubtasks.Clear();

        plans = await StudentPlanService.GetPlansByUserAsync(currentUser!);
    }
}

