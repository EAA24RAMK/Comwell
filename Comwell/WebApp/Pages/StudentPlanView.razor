@page "/elevplaner"
@using WebApp.Services
@using Core.Models
@inject IStudentPlanService StudentPlanService
@inject IUserService UserService
@inject ITemplateService TemplateService
@inject NavigationManager Nav

<h3>Elevplaner</h3>
<p class="welcome-text">Her er et samlet overblik over alle elevplaner.</p>

<div class="mb-3 d-flex gap-3">
    <div>
        <select @onchange="OnHotelChanged" class="form-select">
            <option value="">Alle hoteller</option>
            @foreach (var hotel in allHotels)
            {
                <option value="@hotel" selected="@(hotel == selectedHotel)">
                    @hotel
                </option>
            }
        </select>
    </div>
    <div>
        <select @onchange="OnStudentChanged" class="form-select">
            <option value="-1">Alle elever</option>
            @foreach (var user in allUsers.Where(u => u.Role == "Elev" && (string.IsNullOrEmpty(selectedHotel) || u.Hotel == selectedHotel)))
            {
                <option value="@user.Id" selected="@(user.Id == selectedStudentId)">
                    @user.Name (@user.Hotel)
                </option>
            }
        </select>
    </div>
</div>


@if (plans == null || !plans.Any())
{
    <p>Ingen planer fundet.</p>
}
else
{
    @foreach (var plan in FilteredPlans())
    {
        <div class="plan-box" style="margin-bottom: 2rem; border: 1px solid #ccc; padding: 1rem;">
            <h4>@templates.FirstOrDefault(t => t.Id == plan.TemplateId)?.Title</h4>
            <p><strong>Elev:</strong> @userNamesById.GetValueOrDefault(plan.StudentId, "(Ukendt)")</p>
            <p><strong>Oprettet af:</strong> @plan.CreatedBy</p>
            <p><strong>Periode:</strong> @plan.PeriodStart.ToShortDateString() - @plan.PeriodEnd.ToShortDateString()</p>

            <button class="fold-toggle" @onclick="() => TogglePlan(plan.Id)">
                Mål @if (openPlanIds.Contains(plan.Id)) { <span>▼</span> } else { <span>▶</span> }
            </button>

            @if (openPlanIds.Contains(plan.Id))
            {
                @foreach (var goal in plan.Goals)
                {
                    <div style="margin-left: 1rem; margin-bottom: 1rem;">
                        <button class="fold-toggle" @onclick="() => ToggleGoal(goal.Id)">
                            <strong>@goal.Title</strong> - @GetGoalStatusText(goal)
                            @if (openGoalIds.Contains(goal.Id)) { <span>▼</span> } else { <span>▶</span> }
                        </button>

                        @if (openGoalIds.Contains(goal.Id))
                        {
                            @if (editingGoalId == goal.Id)
                            {
                                <div>
                                    <label>Titel:</label>
                                    <InputText @bind-Value="editableGoalTitle" />

                                    <label>Kategori:</label>
                                    <select @bind="editableGoalCategory">
                                        <option value="Skole">Skole</option>
                                        <option value="Praktik">Praktik</option>
                                    </select>
                                </div>

                                <ul>
                                    @for (int i = 0; i < editableSubtasks.Count; i++)
                                    {
                                        var index = i;
                                        <li @key="index">
                                            <input type="checkbox" 
                                                   checked="@editableSubtasksCompleted[index]" 
                                                   @onchange="e => editableSubtasksCompleted[index] = (bool)e.Value" />
                                            <input value="@editableSubtasks[index]"
                                                   @oninput="e => editableSubtasks[index] = e.Value?.ToString() ?? string.Empty" />
                                            <button @onclick="() => RemoveSubtask(index)">Slet</button>
                                        </li>
                                    }
                                    <li>
                                        <button class="bi bi-plus" @onclick="AddSubtask"> Tilføj delmål</button>
                                    </li>
                                </ul>

                                <button @onclick="() => SaveGoalChanges(plan, goal)"> Gem</button>
                                <button @onclick="CancelEditing">Annuller</button>
                            }
                            else
                            {
                                <ul>
                                    @foreach (var subtask in goal.Subtasks)
                                    {
                                        <li>
                                            <input type="checkbox"
                                                   checked="@subtask.IsCompleted"
                                                   @onchange="e => ToggleSubtaskCompletion(plan, goal, subtask, (bool)e.Value)" />

                                            @subtask.Text

                                            @if (subtask.IsRequestedCompleted && !subtask.IsCompleted)
                                            {
                                                <span class="badge bg-warning text-dark ms-2">Elev har anmodet</span>
                                            }
                                            @if (subtask.IsCompleted)
                                            {
                                                <span class="badge bg-success ms-2">Fuldført</span>
                                            }
                                        </li>
                                    }
                                </ul>
                                <button class="bi bi-pencil-square" @onclick="() => StartEditing(goal)"> Rediger</button>
                                <button class="bi bi-trash" @onclick="() => DeleteGoal(plan, goal)"> ️Slet</button>
                            }
                        }
                    </div>
                }

                <button class="bi bi-plus" @onclick="() => StartAddingNewGoal(plan.Id)"> Tilføj nyt mål</button>

                @if (newGoalPlanId == plan.Id)
                {
                    <div style="margin-left: 1rem; margin-top: 1rem; border-top: 1px dashed #aaa; padding-top: 1rem;">
                        <h5>Nyt mål</h5>
                        <label>Titel:</label>
                        <InputText @bind-Value="newGoalTitle" />

                        <label>Kategori:</label>
                        <select @bind="newGoalCategory">
                            <option value="Skole">Skole</option>
                            <option value="Praktik">Praktik</option>
                        </select>

                        <button class="bi bi-plus" @onclick="() => ConfirmAddGoal(plan)"> Tilføj</button>
                        <button @onclick="CancelAddGoal">Annuller</button>
                    </div>
                }
            }

            <h5>
                <button class="btn fold-toggle" @onclick="() => ToggleNotes(plan.Id)">
                    Noter @if (openNotePlanIds.Contains(plan.Id)) { <span>▼</span> } else { <span>▶</span> }
                </button>
            </h5>

            @if (openNotePlanIds.Contains(plan.Id))
            {
                @foreach (var note in plan.Notes)
                {
                    <div>
                        <em>@note.CreatedAt.ToShortDateString()</em>: @note.Text
                        <button class="btn btn-sm btn-outline-danger ms-2" @onclick="() => DeleteNote(plan, note.Id)">Slet</button>
                    </div>
                }

                @if (addingNoteForPlanId == plan.Id)
                {
                    <div>
                        <textarea class="form-control mb-2"
                                  @oninput="e => newNoteTexts[plan.Id] = e.Value?.ToString() ?? string.Empty">
                            @newNoteTexts.GetValueOrDefault(plan.Id, string.Empty)
                        </textarea>
                        <button class="btn btn-sm btn-success me-2" @onclick="() => SaveNote(plan)">Gem note</button>
                        <button class="btn btn-sm btn-secondary" @onclick="CancelAddNote">Annuller</button>
                    </div>
                }
                else
                {
                    <button class="btn btn-sm btn-outline-secondary mt-2" @onclick="() => StartAddNote(plan.Id)">
                        Tilføj note
                    </button>
                }
            }

            <hr />
        </div>
    }
}

@code {
    private List<StudentPlan> plans = new();
    private List<Template> templates = new();
    private User? currentUser;
    private HashSet<int> openPlanIds = new();
    private HashSet<int> openGoalIds = new();
    private HashSet<int> openNotePlanIds = new();
    private Dictionary<int, string> userNamesById = new();

    private int editingGoalId = -1;
    private List<string> editableSubtasks = new();
    private List<bool> editableSubtasksCompleted = new();
    private string editableGoalTitle = "";
    private string editableGoalCategory = "";

    private int newGoalPlanId = -1;
    private string newGoalTitle = "";
    private string newGoalCategory = "";
    
    //hent alle brugere og lav lister til dropdowns
    private List<User> allUsers = new();
    private List<string> allHotels = new();
    private int selectedStudentId = -1;
    private string selectedHotel = "";
    
    private int addingNoteForPlanId = -1;
    private Dictionary<int, string> newNoteTexts = new();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser is null) return;
        
        // Hvis rolle ikke er HR eller køkkenchef ingen adgang
        if (currentUser == null || (currentUser.Role != "HR" && currentUser.Role != "Køkkenchef"))
        {
            Nav.NavigateTo("/");
        }
        
        allUsers = await UserService.GetAllUsersAsync();
        allHotels = allUsers
            .Where(u => !string.IsNullOrWhiteSpace(u.Hotel))
            .Select(u => u.Hotel)
            .Distinct()
            .OrderBy(h => h)
            .ToList();

        plans = await StudentPlanService.GetPlansByUserAsync(currentUser);
        templates = await TemplateService.GetAllTemplatesAsync();
        
        foreach (var plan in plans)
        {
            if (!userNamesById.ContainsKey(plan.StudentId))
            {
                var user = await UserService.GetUserByIdAsync(plan.StudentId);
                userNamesById[plan.StudentId] = user?.Name ?? "(Ukendt)";
            }
        }
    }

    private void TogglePlan(int planId)
    {
        if (!openPlanIds.Add(planId))
            openPlanIds.Remove(planId);
    }

    private void ToggleGoal(int goalId)
    {
        if (!openGoalIds.Add(goalId))
            openGoalIds.Remove(goalId);
    }
    
    private void ToggleNotes(int planId)
    {
        if (!openNotePlanIds.Add(planId))
            openNotePlanIds.Remove(planId);
    }

    private void StartEditing(Goal goal)
    {
        editingGoalId = goal.Id;
        editableGoalTitle = goal.Title;
        editableGoalCategory = goal.Category;
        editableSubtasks = goal.Subtasks.Select(s => s.Text).ToList();
        editableSubtasksCompleted = goal.Subtasks.Select(s => s.IsCompleted).ToList();
    }

    private void CancelEditing()
    {
        editingGoalId = -1;
        editableSubtasks.Clear();
        editableSubtasksCompleted.Clear();
        editableGoalTitle = "";
        editableGoalCategory = "";
    }

    private void RemoveSubtask(int index)
    {
        if (index >= 0 && index < editableSubtasks.Count)
        {
            editableSubtasks.RemoveAt(index);
            editableSubtasksCompleted.RemoveAt(index);
        }
    }

    private void AddSubtask()
    {
        editableSubtasks.Add(string.Empty);
        editableSubtasksCompleted.Add(false);
    }

    private async Task SaveGoalChanges(StudentPlan plan, Goal goal)
    {
        var planToUpdate = plans.FirstOrDefault(p => p.Id == plan.Id);
        if (planToUpdate == null) return;

        var goalToUpdate = planToUpdate.Goals.FirstOrDefault(g => g.Id == goal.Id);
        if (goalToUpdate == null) return;

        goalToUpdate.Title = editableGoalTitle;
        goalToUpdate.Category = editableGoalCategory;
        
        goalToUpdate.Subtasks = new List<Subtask>();
        for (int i = 0; i < editableSubtasks.Count; i++)
        {
            if (!string.IsNullOrWhiteSpace(editableSubtasks[i]))
            {
                goalToUpdate.Subtasks.Add(new Subtask
                {
                    Text = editableSubtasks[i],
                    IsCompleted = editableSubtasksCompleted[i]
                });
            }
        }

        await StudentPlanService.UpdateStudentPlanAsync(planToUpdate);
        CancelEditing();
        plans = await StudentPlanService.GetPlansByUserAsync(currentUser!);
    }

    private async Task ToggleSubtaskCompletion(StudentPlan plan, Goal goal, Subtask subtask, bool isCompleted)
    {
        subtask.IsCompleted = isCompleted;
        // Opdater status automatisk hvis alle subtasks er fuldført
        if (goal.Subtasks.All(s => s.IsCompleted))
        {
            goal.Status = "Fuldført";
        }
        else if (goal.Subtasks.Any(s => s.IsCompleted))
        {
            goal.Status = "I gang";
        }
        else
        {
            goal.Status = "Ikke startet";
        }
        await StudentPlanService.UpdateStudentPlanAsync(plan);
        plans = await StudentPlanService.GetPlansByUserAsync(currentUser!);
    }

    private string GetGoalStatusText(Goal goal)
    {
        int total = goal.Subtasks.Count;
        int completed = goal.Subtasks.Count(s => s.IsCompleted);

        if (total == 0) return "Ingen delopgaver";
        if (completed == 0) return "Ikke startet";
        if (completed == total) return "Fuldført";
        return $"{completed}/{total} fuldført";
    }

    private void StartAddingNewGoal(int planId)
    {
        newGoalPlanId = planId;
        newGoalTitle = "";
        newGoalCategory = "";
    }

    private void CancelAddGoal()
    {
        newGoalPlanId = -1;
        newGoalTitle = "";
        newGoalCategory = "";
    }

    private async Task ConfirmAddGoal(StudentPlan plan)
    {
        var planToUpdate = plans.FirstOrDefault(p => p.Id == plan.Id);
        if (planToUpdate == null) return;

        var newGoalId = planToUpdate.Goals.Any() ? planToUpdate.Goals.Max(g => g.Id) + 1 : 1;

        var newGoal = new Goal
        {
            Id = newGoalId,
            Title = newGoalTitle,
            Category = newGoalCategory,
            Subtasks = new List<Subtask>(),
            Status = "Ikke startet"
        };

        planToUpdate.Goals.Add(newGoal);
        await StudentPlanService.UpdateStudentPlanAsync(planToUpdate);
        CancelAddGoal();
        plans = await StudentPlanService.GetPlansByUserAsync(currentUser!);
    }

    private async Task DeleteGoal(StudentPlan plan, Goal goal)
    {
        var planToUpdate = plans.FirstOrDefault(p => p.Id == plan.Id);
        if (planToUpdate == null) return;

        planToUpdate.Goals.RemoveAll(g => g.Id == goal.Id);
        await StudentPlanService.UpdateStudentPlanAsync(planToUpdate);
        plans = await StudentPlanService.GetPlansByUserAsync(currentUser!);
    }
    
    // Filtrer planer baseret på dropdowns
    private IEnumerable<StudentPlan> FilteredPlans()
    {
        IEnumerable<StudentPlan> filtered = plans;

        if (!string.IsNullOrEmpty(selectedHotel))
        {
            var studentIds = allUsers
                .Where(u => u.Role == "Elev" && u.Hotel == selectedHotel)
                .Select(u => u.Id)
                .ToHashSet();
            filtered = filtered.Where(p => studentIds.Contains(p.StudentId));
        }

        if (selectedStudentId != -1)
        {
            filtered = filtered.Where(p => p.StudentId == selectedStudentId);
        }

        return filtered;
    }

    private void OnHotelChanged(ChangeEventArgs e)
    {
        selectedHotel = e.Value?.ToString() ?? "";
        selectedStudentId = -1; // Nulstil elevvalg når hotel skiftes
    }

    private void OnStudentChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var id))
            selectedStudentId = id;
        else
            selectedStudentId = -1;
    }
    
    private void StartAddNote(int planId)
    {
        addingNoteForPlanId = planId;
        if (!newNoteTexts.ContainsKey(planId))
        {
            newNoteTexts[planId] = string.Empty;
        }
    }

    private void CancelAddNote()
    {
        addingNoteForPlanId = -1;
    }

    private async Task SaveNote(StudentPlan plan)
    {
        if (!newNoteTexts.TryGetValue(plan.Id, out var noteText) || string.IsNullOrWhiteSpace(noteText))
            return;

        var newNote = new Note
        {
            Id = plan.Notes.Any() ? plan.Notes.Max(n => n.Id) + 1 : 1,
            Text = noteText.Trim(),
            CreatedAt = DateTime.Now
        };

        plan.Notes.Add(newNote);
        await StudentPlanService.UpdateStudentPlanAsync(plan);

        newNoteTexts[plan.Id] = string.Empty;
        addingNoteForPlanId = -1;
        StateHasChanged();
    }
    
    private async Task DeleteNote(StudentPlan plan, int noteId)
    {
        var planToUpdate = plans.FirstOrDefault(p => p.Id == plan.Id);
        if (planToUpdate == null) return;

        planToUpdate.Notes.RemoveAll(n => n.Id == noteId);

        await StudentPlanService.UpdateStudentPlanAsync(planToUpdate);

        // Opdater viewet
        plans = await StudentPlanService.GetPlansByUserAsync(currentUser!);
    }
}
