@page "/opret-plan"
@using Core.Models
@using WebApp.Services
@inject IStudentPlanService StudentPlanService
@inject IUserService UserService
@inject ITemplateService TemplateService
@inject NavigationManager Nav

<div class="page-container">
    <h3 class="form-title">Opret plan</h3>

    @if (!string.IsNullOrEmpty(feedbackMessage))
    {
        <p>@feedbackMessage</p>
    }

    <EditForm Model="planModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Vælg elev:</label>
            <select @bind="selectedUserId">
                <option value="">Vælg en elev</option>
                @foreach (var user in students)
                {
                    <option value="@user.Id">@user.Name</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label>Vælg skabelon:</label>
            <select @bind="SelectedTemplateId">
                <option value="">Vælg en skabelon</option>
                @foreach (var template in templates)
                {
                    <option value="@template.Id">@template.Title</option>
                }
            </select>
        </div>
        
        <div class="form-group">
            <label>Startdato:</label>
            <InputDate @bind-Value="planModel.PeriodStart" />
        </div>

        <button type="submit">Gem plan</button>
    </EditForm>
</div>

@code {
    private string feedbackMessage = "";
    private List<User> students = new();
    private List<User> kitchenChefs = new();
    private int selectedUserId;
    private List<Template> templates = new();
    private Template? selectedTemplate;
    private string responsible = "";
    private string location = "";
    private List<string> hotelLocations = new();
    private User? currentUser;
    
    private StudentPlan planModel = new()
    {
        PeriodStart = DateTime.Today
    };


    private int selectedTemplateId;
    private int SelectedTemplateId
    {
        get => selectedTemplateId;
        set
        {
            if (selectedTemplateId != value)
            {
                selectedTemplateId = value;
                LoadSelectedTemplate();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var allUsers = await UserService.GetAllUsersAsync();
        kitchenChefs = allUsers.Where(u => u.Role == "Køkkenchef").ToList();
        students = allUsers.Where(u => u.Role == "Elev").ToList();
        templates = await TemplateService.GetAllTemplatesAsync();
        
        // Henter alle hoteller fra brugerne
        hotelLocations = allUsers
            .Where(u => !string.IsNullOrWhiteSpace(u.Hotel))
            .Select(u => u.Hotel)
            .Distinct()
            .ToList();
        
        currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser != null && currentUser.Role == "Elev")
        {
            Nav.NavigateTo("/");
        }
    }

    private async void LoadSelectedTemplate()
    {
        selectedTemplate = await TemplateService.GetTemplateByIdAsync(selectedTemplateId);
        StateHasChanged(); // Sørger for UI-opdatering
    }

    private async Task HandleSubmit()
    {
        if (selectedTemplate is null)
        {
            feedbackMessage = "Du skal vælge en skabelon.";
            return;
        }

        planModel.StudentId = selectedUserId;
        planModel.TemplateId = selectedTemplateId;

        DateTime start = planModel.PeriodStart;
        var referenceDate = selectedTemplate.Goals.First().Deadline;

        var adjustedGoals = new List<Goal>();

        foreach (var goal in selectedTemplate.Goals)
        {
            var dayOffset = (goal.Deadline - referenceDate).Days;

            var adjustedGoal = new Goal
            {
                Id = goal.Id,
                Title = goal.Title,
                Description = goal.Description,
                Category = goal.Category,
                Deadline = start.AddDays(dayOffset),
                Status = "Ikke startet",
                Responsible = goal.Responsible,
                InitiatedBy = goal.InitiatedBy,
                CheckedOff = false,
                Location = goal.Location,
                Subtasks = goal.Subtasks.ToList(),
                Comments = new(),
                StudentNotes = new(),
                Attachments = new()
            };

            adjustedGoals.Add(adjustedGoal);
        }

        var currentUser = await UserService.GetCurrentUserAsync();
        planModel.CreatedBy = currentUser.Name;

        planModel.Goals = adjustedGoals;
        planModel.PeriodEnd = adjustedGoals.Max(g => g.Deadline);
        planModel.PeriodStart = planModel.PeriodStart.Date;

        await StudentPlanService.CreateStudentPlanAsync(planModel);
        feedbackMessage = "Planen er gemt!";
        Nav.NavigateTo("/elevplaner");
    }
}
