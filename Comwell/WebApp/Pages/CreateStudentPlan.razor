@page "/opret-plan"
@using Core.Models
@using WebApp.Services
@inject IStudentPlanService StudentPlanService
@inject IUserService UserService
@inject ITemplateService TemplateService
@inject NavigationManager NavigationManager

<h3>Opret plan</h3>

@if (!string.IsNullOrEmpty(feedbackMessage))
{
    <p>@feedbackMessage</p>
}

<EditForm Model="planModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    

    <div>
        <label>V√¶lg elev:</label>
        <select @bind="selectedUserId">
            <option value="">-- V√¶lg en elev --</option>
            @foreach (var user in students)
            {
                <option value="@user.Id">@user.Name</option>
            }
        </select>
    </div>

    <div>
        <label>V√¶lg skabelon:</label>
        <select @bind="SelectedTemplateId">
            <option value="">-- V√¶lg en skabelon --</option>
            @foreach (var template in templates)
            {
                <option value="@template.Id">@template.Title</option>
            }
        </select>
    </div>
    
    <div>
        <label>Lokation:</label>
        <select @bind="location">
            <option value="">-- V√¶lg lokation --</option>
            <option value="Comwell Aarhus">Comwell Aarhus</option>
            <option value="Comwell Kolding">Comwell Kolding</option>
            <option value="Comwell Roskilde">Comwell Roskilde</option>
        </select>
    </div>
    

    <div>
        <label>Ansvarlig:</label>
        <select @bind="responsible">
            <option value="">-- V√¶lg ansvarlig --</option>
            @foreach (var user in kitchenChefs.Where(u => u.Role == "K√∏kkenchef"))
            {
                <option value="@user.Name">@user.Name</option>
            }
        </select>
    </div>
    
    <div>
        <label>Startdato:</label>
        <InputDate @bind-Value="planModel.PeriodStart" />
    </div>

    <button type="submit">Gem plan</button>
</EditForm>

@code {
    private string feedbackMessage = "";
    private List<User> students = new();
    private List<User> kitchenChefs = new();
    private int selectedUserId;
    private List<Template> templates = new();
    private Template? selectedTemplate;
    private string responsible = "";
    private string location = "";
    private StudentPlan planModel = new()
    {
        PeriodStart = DateTime.Today
    };


    private int selectedTemplateId;
    private int SelectedTemplateId
    {
        get => selectedTemplateId;
        set
        {
            if (selectedTemplateId != value)
            {
                selectedTemplateId = value;
                LoadSelectedTemplate();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var allUsers = await UserService.GetAllUsersAsync();
        kitchenChefs = allUsers.Where(u => u.Role == "K√∏kkenchef").ToList();
        students = allUsers.Where(u => u.Role == "Elev").ToList();
        templates = await TemplateService.GetAllTemplatesAsync();
    }

    private async void LoadSelectedTemplate()
    {
        selectedTemplate = await TemplateService.GetTemplateByIdAsync(selectedTemplateId);
        StateHasChanged(); // S√∏rger for UI-opdatering
    }

    private async Task HandleSubmit()
    {
        if (selectedTemplate is null)
        {
            feedbackMessage = "Du skal v√¶lge en skabelon.";
            return;
        }

        planModel.StudentId = selectedUserId;
        planModel.TemplateId = selectedTemplateId;

        DateTime start = planModel.PeriodStart;
        var referenceDate = selectedTemplate.Goals.First().Deadline;

        var adjustedGoals = new List<Goal>();

        foreach (var goal in selectedTemplate.Goals)
        {
            var dayOffset = (goal.Deadline - referenceDate).Days;

            var adjustedGoal = new Goal
            {
                Id = goal.Id,
                Title = goal.Title,
                Description = goal.Description,
                Category = goal.Category,
                Deadline = start.AddDays(dayOffset),
                Status = "Ikke startet",
                Responsible = goal.Responsible,
                InitiatedBy = goal.InitiatedBy,
                CheckedOff = false,
                Location = goal.Location,
                Subtasks = goal.Subtasks.ToList(),
                Comments = new(),
                StudentNotes = new(),
                Attachments = new()
            };

            adjustedGoals.Add(adjustedGoal);
        }
        
        var currentUser = await UserService.GetCurrentUserAsync(); // üëà hent brugeren
        planModel.CreatedBy = currentUser.Name;
    

        planModel.Goals = adjustedGoals;
        planModel.PeriodEnd = adjustedGoals.Max(g => g.Deadline);

        await StudentPlanService.CreateStudentPlanAsync(planModel);
        feedbackMessage = "Planen er gemt!";
        NavigationManager.NavigateTo("/elevplaner");
    }
}
