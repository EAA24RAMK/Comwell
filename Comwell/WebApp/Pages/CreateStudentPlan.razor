@page "/opret-plan"
@using Core.Models
@using WebApp.Services
@inject IStudentPlanService StudentPlanService
@inject IUserService UserService
@inject ITemplateService TemplateService
@inject NavigationManager NavigationManager

<h3>Opret plan</h3>

@if (!string.IsNullOrEmpty(feedbackMessage))
{
    <p>@feedbackMessage</p>
}

<EditForm Model="planModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Titel:</label>
        <InputText @bind-Value="planModel.Title" />
    </div>

    <div>
        <label>Vælg elev:</label>
        <select @bind="selectedUserId">
            <option value="">-- Vælg en elev --</option>
            @foreach (var user in users)
            {
                <option value="@user.Id">@user.Name</option>
            }
        </select>
    </div>

    <div>
        <label>Vælg skabelon:</label>
        <select @bind="selectedTemplateId">
            <option value="">-- Vælg en skabelon --</option>
            @foreach (var template in templates)
            {
                <option value="@template.Id">@template.Title</option>
            }
        </select>
    </div>

    <div>
        <label>Oprettet af (bruger-id):</label>
        <InputText @bind-Value="planModel.CreatedBy" />
    </div>

    <div>
        <label>Startdato:</label>
        <InputDate @bind-Value="planModel.PeriodStart" />
    </div>

    <div>
        <label>Slutdato:</label>
        <InputDate @bind-Value="planModel.PeriodEnd" />
    </div>

    <button type="submit">Gem plan</button>
</EditForm>

@code {
    private StudentPlan planModel = new StudentPlan();
    private string feedbackMessage = "";
    private List<User> users = new ();
    private string selectedUserId = "";
    private List<Template> templates = new();
    private string selectedTemplateId = "";

    
    protected override async Task OnInitializedAsync()
    {
        var allUsers = await UserService.GetAllUsersAsync();
        users = allUsers.Where(u => u.Role == "Elev").ToList();
        
        templates = await TemplateService.GetAllTemplatesAsync();
    }

    private async Task HandleSubmit()
    {
        planModel.UserId = selectedUserId;
        planModel.TemplateId = selectedTemplateId;
        
        await StudentPlanService.CreateStudentPlanAsync(planModel);
        feedbackMessage = "Planen er gemt!";
        NavigationManager.NavigateTo("/elevplaner"); // Eller hvor I vil navigere hen bagefter
    }
}