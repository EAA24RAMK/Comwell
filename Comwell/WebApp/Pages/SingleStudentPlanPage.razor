@page "/elevplan"
@using WebApp.Services
@using WebApp.Components
@using Core.Models
@inject IStudentPlanService StudentPlanService
@inject IUserService UserService
@inject ITemplateService TemplateService
@inject ILearningMaterialService MaterialService
@inject NavigationManager Nav

<h3>@(currentUser?.Name ?? "Min") elevplan</h3>
<p></p>

@if (plans?.Any() != true)
{
    <p>Ingen planer fundet.</p>
}
else
{
    @foreach (var plan in plans)
    {
        <div class="plan-box">
            <h4>@templates.FirstOrDefault(t => t.Id == plan.TemplateId)?.Title</h4>
            <p><strong>Periode:</strong> @plan.PeriodStart.ToShortDateString() - @plan.PeriodEnd.ToShortDateString()</p>
            <p><strong>Oprettet af:</strong> @plan.CreatedBy</p>

            <button class="fold-toggle" @onclick="() => TogglePlan(plan.Id)">
                Mål @if (openPlanIds.Contains(plan.Id)) { <span>▼</span> } else { <span>▶</span> }
            </button>

            @if (openPlanIds.Contains(plan.Id))
            {
                @foreach (var goal in plan.Goals)
                {
                    <div style="margin-left: 1rem; margin-bottom: 1rem;">
                        <button class="fold-toggle" @onclick="() => ToggleGoal(goal.Id)">
                            <strong>@goal.Title</strong> - <GoalStatusComponent Goal="goal" />
                            @if (openGoalIds.Contains(goal.Id)) { <span>▼</span> } else { <span>▶</span> }
                        </button>

                        @if (openGoalIds.Contains(goal.Id))
                        {
                            <ul>
                                @foreach (var subtask in goal.Subtasks)
                                {
                                    <li class="d-flex align-items-center gap-2">
                                        <input type="checkbox"
                                               disabled="@(subtask.Status == "Ikke startet")"
                                               checked="@(subtask.Status == "Fuldført")"
                                               @onchange="e => RequestSubtaskCompletion(plan, goal, subtask)" />
                                        
                                        <button class="btn btn-sm btn-outline-secondary"
                                                @onclick="() => StartSubtask(plan, goal, subtask)">
                                            Start
                                        </button>

                                        @subtask.Text

                                        <span class="badge @GetStatusClass(subtask.Status)">
                                            @subtask.Status
                                        </span>

                                        @if (subtask.IsRequestedCompleted && subtask.Status != "Fuldført")
                                        {
                                            <span class="badge bg-warning text-dark ms-2">Anmodet om fuldførelse</span>
                                        }

                                        @if (allMaterials.Any(m => m.SubtaskId == subtask.Id))
                                        {
                                            <button class="btn btn-sm btn-info ms-2"
                                                    @onclick="@(() => Nav.NavigateTo($"/learningmaterials?subtaskId={subtask.Id}"))">
                                                Læringsmateriale
                                            </button>
                                        }
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                }
            }
            
            @foreach (var school in plan.SchoolPeriods)
            {
                <div class="mb-4 p-3 border rounded">
                    <h5>@school.Title</h5>
                    @if (school.StartDate.HasValue && school.IsDateConfirmed)
                    {
                        var start = school.StartDate.Value;
                        var end = start.AddDays(7 * school.DurationWeeks);
                        <p><strong>Dato:</strong> @start.ToString("dd.MM.yyyy") - @end.ToString("dd.MM.yyyy")</p>
                    }
                    else
                    {
                        <p class="text-muted"><em>Dato ikke valgt endnu</em></p>
                    }

                    <span class="badge @GetStatusClass(school.Status)">
                        @school.Status
                    </span>

                    @if (school.IsApproved)
                    {
                        <p class="text-success mt-2">✔ Skoleperiode godkendt af køkkenchef</p>
                    }
                </div>
            }

            <h5>
                <button class="btn fold-toggle" @onclick="() => ToggleNotes(plan.Id)">
                    Noter @if (openNotePlanIds.Contains(plan.Id)) { <span>▼</span> } else { <span>▶</span> }
                </button>
            </h5>

            @if (openNotePlanIds.Contains(plan.Id))
            {
                @foreach (var note in plan.Notes)
                {
                    <div>
                        <em>@note.CreatedAt.ToShortDateString()</em>: @note.Text
                    </div>
                }

                @if (addingNoteForPlanId == plan.Id)
                {
                    <div>
                        <textarea class="form-control mb-2"
                                  @oninput="e => newNoteTexts[plan.Id] = e.Value?.ToString() ?? string.Empty">
                            @newNoteTexts.GetValueOrDefault(plan.Id, string.Empty)
                        </textarea>
                        <button @onclick="() => SaveNote(plan)">Gem note</button>
                        <button @onclick="CancelAddNote">Annuller</button>
                    </div>
                }
                else
                {
                    <button class="bi bi-plus" @onclick="() => StartAddNote(plan.Id)">
                        Tilføj note
                    </button>
                }
            }
        </div>
    }
}

@code {
    private List<StudentPlan> plans = new();
    private List<Template> templates = new();
    private List<LearningMaterial> allMaterials = new();
    private User? currentUser;
    
    // UI State
    private HashSet<int> openPlanIds = new();
    private HashSet<int> openGoalIds = new();
    private HashSet<int> openNotePlanIds = new();
    private int addingNoteForPlanId = -1;
    private Dictionary<int, string> newNoteTexts = new();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser?.Role != "Elev")
        {
            Nav.NavigateTo("/");
            return;
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        if (currentUser is null) return;
        
        plans = await StudentPlanService.GetPlansByUserAsync(currentUser);
        allMaterials = await MaterialService.GetAllAsync();
        templates = await TemplateService.GetAllTemplatesAsync();
    }

    private void TogglePlan(int planId)
    {
        if (!openPlanIds.Add(planId))
            openPlanIds.Remove(planId);
    }

    private void ToggleGoal(int goalId)
    {
        if (!openGoalIds.Add(goalId))
            openGoalIds.Remove(goalId);
    }

    private void ToggleNotes(int planId)
    {
        if (!openNotePlanIds.Add(planId))
            openNotePlanIds.Remove(planId);
    }

    private async Task RequestSubtaskCompletion(StudentPlan plan, Goal goal, Subtask subtask)
    {
        if (subtask.Status == "I gang")
        {
            subtask.IsRequestedCompleted = true;
            await StudentPlanService.UpdateStudentPlanAsync(plan);
            await LoadData();
        }
    }

    private async Task StartSubtask(StudentPlan plan, Goal goal, Subtask subtask)
    {
        if (subtask.Status == "Ikke startet")
        {
            subtask.Status = "I gang";
            await StudentPlanService.UpdateStudentPlanAsync(plan);
            await LoadData();
        }
    }

    private void StartAddNote(int planId)
    {
        addingNoteForPlanId = planId;
        if (!newNoteTexts.ContainsKey(planId))
        {
            newNoteTexts[planId] = string.Empty;
        }
    }

    private void CancelAddNote() => addingNoteForPlanId = -1;

    private async Task SaveNote(StudentPlan plan)
    {
        if (!newNoteTexts.TryGetValue(plan.Id, out var noteText) || string.IsNullOrWhiteSpace(noteText))
            return;

        var newNote = new Note
        {
            Id = plan.Notes.Any() ? plan.Notes.Max(n => n.Id) + 1 : 1,
            Text = noteText.Trim(),
            CreatedAt = DateTime.Now
        };

        plan.Notes.Add(newNote);
        await StudentPlanService.UpdateStudentPlanAsync(plan);
        newNoteTexts[plan.Id] = string.Empty;
        addingNoteForPlanId = -1;
        await LoadData();
    }

    private static string GetStatusClass(string status) => status switch
    {
        "Fuldført" => "bg-success",
        "I gang" => "bg-warning text-dark",
        _ => "bg-secondary"
    };
}
