@page "/posts"
@using WebApp.Services
@using Core.Models
@inject IUserService UserService
@inject IPostService PostService

@if (currentUser == null)
{
    <p><strong>Du skal være logget ind for at bruge opslagstavlen.</strong></p>
}
else
{
    <div class="posts-container">
        <h3>Opslagstavle</h3>
        
        <div class="topbar">
            <input @bind="searchTerm" @bind:event="oninput" placeholder="Søg efter titel eller indhold..." class="search-field" />
            <button class="create-modal-button" @onclick="() => showModal = true">Opret opslag</button>
        </div>

        <!-- Opslag -->
        <div class="posts-list">
            @if (FilteredPosts.Any())
            {
                @foreach (var post in FilteredPosts.OrderByDescending(p => p.Id))
                {
                    <div class="post-card">
                        <div class="post-header">
                            <div class="post-author-avatar">@GetInitials(post.Author)</div>
                            <div class="post-meta">
                                <div class="post-title">@post.Title</div>
                                <div class="post-author">af @post.Author – @post.CreatedAt.ToString("dd MMM yyyy HH:mm")</div>
                            </div>
                            <div class="post-options">
                                <button class="delete-button" @onclick="() => ToggleDeletePopup(post.Id)">⋮</button>
                                @if (confirmDeletePostId == post.Id)
                                {
                                    <div class="confirm-popup">
                                        <button @onclick="() => ConfirmDelete(post.Id)">Slet</button>
                                    </div>
                                }
                            </div>
                        </div>
                        <p class="post-content">@post.Content</p>
                    </div>
                }
            }
            else
            {
                <p>Ingen opslag matcher din søgning.</p>
            }
        </div>
    </div>
    
    @if (showModal)
    {
        <div class="modal-backdrop" @onclick="CloseModal"></div>
        <div class="modal">
            <h4>Opret nyt opslag</h4>
            <input @bind="newPost.Title" placeholder="Titel" class="input-field" />
            <textarea @bind="newPost.Content" placeholder="Indhold" rows="4" class="textarea-field"></textarea>
            <div class="modal-actions">
                <button class="cancel-button" @onclick="CloseModal">Annuller</button>
                <button class="create-button" @onclick="SubmitModal">Opret</button>
            </div>
        </div>
    }
}

@code {
    private List<Post> posts = new();
    private Post newPost = new();
    private User? currentUser;
    private string searchTerm = "";
    private int? confirmDeletePostId = null;
    private bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUserAsync();
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        posts = await PostService.GetAllPostsAsync();
    }

    private async Task SubmitModal()
    {
        newPost.Author = currentUser?.Name ?? "Ukendt";
        newPost.CreatedAt = DateTime.Now;

        await PostService.CreatePostAsync(newPost);
        newPost = new();
        showModal = false;

        await LoadPosts();
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task ConfirmDelete(int id)
    {
        await PostService.DeletePostAsync(id);
        confirmDeletePostId = null;
        await LoadPosts();
    }

    private void ToggleDeletePopup(int postId)
    {
        if (confirmDeletePostId == postId)
            confirmDeletePostId = null;
        else
            confirmDeletePostId = postId;
    }

    private IEnumerable<Post> FilteredPosts =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? posts
            : posts.Where(p =>
                (!string.IsNullOrEmpty(p.Title) && p.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(p.Content) && p.Content.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            );

    private string GetInitials(string? fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName)) return "";
        var parts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return parts.Length == 1
            ? parts[0][0].ToString().ToUpper()
            : $"{parts[0][0]}{parts[^1][0]}".ToUpper();
    }
}
