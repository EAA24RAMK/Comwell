@page "/users"
@using Core.Models
@using WebApp.Services
@inject IUserService UserService
@inject NavigationManager Nav

<h3>Brugere</h3>

<!-- Filtersektion til søgning og filtrering af brugere -->
<div class="filters">
    <!-- Søg efter brugernavn -->
    <input type="text" @bind="searchTerm" @bind:event="oninput" placeholder="Søg efter bruger..."/>
    
    <!-- Filtrer efter rolle -->
    <select @bind="selectedRole">
        <option value="">Alle roller</option>
        @foreach (var role in Roles)
        {
            <option value="@role">@role</option>
        }
    </select>
    
    <!-- Filtrer efter hotel -->
    <select @bind="selectedHotel">
        <option value="">Alle lokationer</option>
        @foreach (var hotel in hotels)
        {
            <option value="@hotel">@hotel</option>
        }
    </select>
    
    <!-- Vis knap til oprettelse af bruger, hvis den loggede bruger er HR -->
    @if (currentUser?.Role == "HR")
    {
        <button @onclick="CreateUser">+ Tilføj bruger</button>
    }
</div>

<!-- Liste over brugere -->
<div class="user-list">
    <!-- Header til listen -->
    <div class="user-card user-header">
        <div></div>
        <div class="header-label">Bruger</div>
        <div class="header-label">Skole</div>
        <div class="header-label">Lokation</div>
        <div class="header-label">Status</div>
        <div></div>
    </div>

    <!-- Viser hver enkelt bruger som et kort -->
    @foreach (var user in FilteredUsers)
    {
        <div class="user-card">
            <div class="avatar">@GetInitials(user.Name)</div>
            <div class="user-info">
                <div class="user-name">@user.Name</div>
                <div class="user-role">@user.Role</div>
            </div>
            <div class="user-school">
                @(string.IsNullOrWhiteSpace(user.SchoolType) ? "-" : user.SchoolType)
            </div>
            <div class="user-location">
                @(string.IsNullOrWhiteSpace(user.Hotel) ? "-" : user.Hotel)
            </div>
            <div class="user-status @(user.Status == "Aktiv" ? "active" : "inactive")">
                @user.Status
            </div>
            
            <!-- Action-menu til HR-brugere -->
            <div class="user-actions">
                @if (currentUser?.Role == "HR")
                {
                    <button @onclick="() => ToggleActionMenu(user.Id)">⋮</button>
                    @if (activeActionMenuUserId == user.Id)
                    {
                        <div class="action-menu">
                            <button class="action-button" @onclick="() => ToggleUserStatusAsync(user)">
                                @(user.Status == "Aktiv" ? "Gør inaktiv" : "Gør aktiv")
                            </button>
                            <button class="action-button delete-button" @onclick="() => DeleteUserAsync(user.Id)">
                                Slet
                            </button>
                        </div>
                    }
                }
            </div>
        </div>
    }
</div>

<!-- Modal til oprettelse af en ny bruger -->
@if (showCreateModal)
{
    <div class="modal-background">
        <div class="modal-box">
            <h5>Opret ny bruger</h5>
            <!-- Formularfelter -->
            <input @bind="newUser.Name" placeholder="Navn" />
            <input @bind="newUser.Email" placeholder="Email" />
            <input @bind="newUser.Password" placeholder="Adgangskode" type="password" />
            <input @bind="newUser.Hotel" placeholder="Hotel" />
            
            <!-- Vælg rolle -->
            <select @bind="newUser.Role">
                <option disabled selected>Vælg rolle</option>
                @foreach (var role in Roles)
                {
                    <option value="@role">@role</option>
                }
            </select>
            
            <!-- Vælg status -->
            <select @bind="newUser.Status">
                <option disabled selected value="">Vælg status</option>
                <option value="Aktiv">Aktiv</option>
                <option value="Inaktiv">Inaktiv</option>
            </select>
            
            <!-- Hvis rollen er Elev, vis valg af skoletype -->
            @if (newUser.Role == "Elev")
            {
                <select @bind="newUser.SchoolType">
                    <option disabled selected value="">Vælg skole</option>
                    <option value="EUX">EUX</option>
                    <option value="EUV">EUV</option>
                    <option value="Voksenelev">Voksenelev</option>
                    <option value="Ordinær">Ordinær</option>
                </select>
            }
            
            <!-- Knapper -->
            <button @onclick="SaveUserAsync">Gem</button>
            <button @onclick="CloseCreateModal">Luk</button>
            
            <!-- Viser besked ved oprettelse -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p>@errorMessage</p>
            }
        </div>
    </div>
}

@code {
    private static readonly List<string> Roles = new() { "Elev", "Køkkenchef", "HR", "Kok" }; // Roller der kan vælges
    private User? currentUser; // Den aktuelle loggede bruger
    private List<User> users = new(); // Liste over alle brugere
    private List<string> hotels = new(); // Liste over hoteller brugt til filtrering
    
    // Filtrering
    private string searchTerm = ""; // Søgefelt til filtrering af brugere baseret på navn
    private string selectedRole = ""; // Valgt rolle til filtrering
    private string selectedHotel = ""; // Valgt hotel til filtrering
    
    // UI
    private int? activeActionMenuUserId; // Holder styr på hvilken bruger man via (⋮) vil slette eller gøre Inaktiv/Aktiv
    private bool showCreateModal; // Viser/skjuler opret bruger-modal
    
    // Tilføj bruger
    private User newUser = new(); // Den bruger der oprettes
    private string errorMessage = ""; // Fejlbesked
    
    // Returnerer en liste over brugere filtreret ud fra søgefelt, rolle og hotel
    private IEnumerable<User> FilteredUsers =>
        users.Where(u =>
            (string.IsNullOrEmpty(searchTerm) || u.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(selectedRole) || u.Role == selectedRole) &&
            (string.IsNullOrEmpty(selectedHotel) || u.Hotel == selectedHotel));

    // Formål: Initialiserer siden ved at hente den aktuelle bruger, brugerliste og hoteller.
    // Funktion:
    // 1. Henter den bruger, som er logget ind, via UserService.
    // 2. Tjekker om den loggede bruger er "Elev" – i så fald sendes de til forsiden.
    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser?.Role == "Elev")
        {
            Nav.NavigateTo("/");
            return;
        }

        users = await UserService.GetAllUsersAsync();
        hotels = users
            .Select(u => u.Hotel) // Tager alle brugers hotel
            .Where(h => !string.IsNullOrEmpty(h)) // Fjerner tomme eller null hoteller
            .Distinct() // Sørger for at hvert hotel kun vises en gang
            .OrderBy(h => h) // Sortere listen i alfabetisk rækkefølge
            .ToList(); // Laver det om til en liste, som gemmes i hotels
    }

    // Formål: Åbner modal-vinduet til oprettelse af en ny bruger.
    private void CreateUser()
    {
        showCreateModal = true;
        newUser = new();
        errorMessage = "";
    }
    
    // Formål: Lukker modal-vinduet uden at gemme noget.
    private void CloseCreateModal() => showCreateModal = false;

    // Formål: Gemmer en ny bruger i databasen.
    // Funktion:
    // 1. Sender newUser til backend via UserService.
    // 2. Hvis brugeren ikke blev oprettet korrekt vises fejlbesked.
    private async Task SaveUserAsync()
    {
        var result = await UserService.CreateUserAsync(newUser);
        if (result == null) errorMessage = "Noget gik galt under oprettelsen";
        
        if (result != null)
        {
            users = await UserService.GetAllUsersAsync();
            showCreateModal = false;
        }
    }

    // Formål: Sletter en bruger.
    // Funktion:
    // 1. Tjekker om den loggede bruger er HR.
    // 2. Kalder UserService for at slette brugeren med angivet ID.
    // 3. Hvis sletningen lykkes, hentes listen af brugere igen.
    private async Task DeleteUserAsync(int userId)
    {
        if (currentUser?.Role == "HR" && await UserService.DeleteUserAsync(userId))
        {
            users = await UserService.GetAllUsersAsync();
        }
        activeActionMenuUserId = null;
    }

    // Formål: Viser eller skjuler action-menuen (⋮) for en bestemt bruger.
    // Funktion:
    // - Hvis brugeren klikker på menuen igen, lukkes den.
    // - Hvis en anden brugers menu åbnes, vises den i stedet.
    private void ToggleActionMenu(int userId) =>
        activeActionMenuUserId = activeActionMenuUserId == userId ? null : userId;

    // Formål: Returnerer initialer ud fra brugerens fulde navn.
    // Funktion:
    // - Splitter navnet op ved mellemrum.
    // - Hvis der er flere navne, bruges første bogstav i begge navne.
    // - Hvis kun ét navn, bruges første bogstav.
    private static string GetInitials(string fullName)
    {
        var parts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return parts.Length switch
        {
            0 => "",
            1 => parts[0][..1].ToUpper(),
            _ => $"{parts[0][..1]}{parts[^1][..1]}".ToUpper()
        };
    }
    
    // Formål: Skifter en brugers status mellem Aktiv og Inaktiv.
    // Funktion:
    // - Opdaterer status via UserService.
    // - Når status er ændret, opdateres brugerlisten.
    private async Task ToggleUserStatusAsync(User user)
    {
        var newStatus = user.Status == "Aktiv" ? "Inaktiv" : "Aktiv";
        if (await UserService.UpdateUserStatusAsync(user.Id, newStatus))
        {
            users = await UserService.GetAllUsersAsync();
        }
        activeActionMenuUserId = null;
    }
}
