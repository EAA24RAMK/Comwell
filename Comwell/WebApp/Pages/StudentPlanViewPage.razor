@page "/elevplaner"
@using WebApp.Services
@using WebApp.Components
@using Core.Models
@inject IStudentPlanService StudentPlanService
@inject IUserService UserService
@inject ITemplateService TemplateService
@inject ILearningMaterialService MaterialService
@inject NavigationManager Nav

<!-- Side til visning og administration af elevplaner -->
<h3>Elevplaner</h3>
<p class="welcome-text">Her er et samlet overblik over alle elevplaner.</p>

<!-- Filtrering efter hotel og elev -->
<div class="mb-3 d-flex gap-3">
    <div>
        <select @bind="selectedHotel" class="form-select">
            <option value="">Alle hoteller</option>
            @foreach (var hotel in allHotels)
            {
                <option value="@hotel">@hotel</option>
            }
        </select>
    </div>
    <div>
        <select @bind="selectedStudentId" class="form-select">
            <option value="-1">Alle elever</option>
            @foreach (var user in FilteredUsers)
            {
                <option value="@user.Id">
                    @user.Name (@user.Hotel)
                </option>
            }
        </select>
    </div>
</div>

<!-- Viser en besked hvis der ikke er nogen planer -->
@if (plans?.Any() != true)
{
    <p>Ingen planer fundet.</p>
}
else
{
    <!-- Gennemløb og visning af planer -->
    @foreach (var plan in FilteredPlans())
    {
        <div class="plan-box">
            <!-- Viser skabelontitel -->
            <h4>@templates.FirstOrDefault(t => t.Id == plan.TemplateId)?.Title</h4>
            <!-- Handlingsmenu (fx slet plan) -->
            <div class="plan-actions">
                <button @onclick="() => ToggleActionMenu(plan.Id)">⋮</button>
                @if (activeActionMenuPlanId == plan.Id)
                {
                    <div class="action-menu">
                        <button class="delete-button" @onclick="() => DeleteStudentPlanAsync(plan.Id)">Slet</button>
                    </div>
                }
            </div>
            
            <!-- Vis elevens navn -->
            <p><strong>Elev:</strong> @userNamesById.GetValueOrDefault(plan.StudentId, "(Ukendt)")</p>
            <p><strong>Oprettet af:</strong> @plan.CreatedBy</p>
            <p><strong>Periode:</strong> @plan.PeriodStart.ToShortDateString() - @plan.PeriodEnd.ToShortDateString()</p>

            <!-- Køkkenchefens godkendelse -->
            @if (currentUser?.Role == "Køkkenchef")
            {
                if (!plan.IsApprovedByChef)
                {
                    <button @onclick="() => ApprovePlan(plan)">Godkend praktikperiode</button>
                }
                else
                {
                    <p class="text-success mt-2">✔ Praktikperiode godkendt af køkkenchef</p>
                }
            }
            else if (plan.IsApprovedByChef)
            {
                <p class="text-success mt-2">✔ Praktikperiode godkendt af køkkenchef</p>
            }

            <!-- Vis og skjul mål -->
            <button class="fold-toggle" @onclick="() => TogglePlan(plan.Id)">
                Mål
                @if (openPlanIds.Contains(plan.Id))
                {
                    <span>▼</span>
                }
                else
                {
                    <span>▶</span>
                }
            </button>

            <!-- Viser alle mål -->
            @if (openPlanIds.Contains(plan.Id))
            {
                @foreach (var goal in plan.Goals)
                {
                    <GoalDisplayComponent
                        goal="goal"
                        plans="plans"
                        plan="plan"
                        allMaterials="allMaterials"
                        currentUser="currentUser"
                        refresh="EventCallback.Factory.Create(this, () => StateHasChanged())"/>
                }

                <button class="bi bi-plus" @onclick="() => StartAddingNewGoal(plan.Id)">Tilføj nyt mål</button>

                @if (newGoalPlanId == plan.Id)
                {
                    <!-- Formular til at tilføje nyt mål -->
                    <div class="new-goal-form">
                        <h5>Nyt mål</h5>
                        <label>Titel:</label>
                        <InputText @bind-Value="newGoalTitle"/>

                        <label>Kategori:</label>
                        <select @bind="newGoalCategory">
                            <option value="Skole">Skole</option>
                            <option value="Praktik">Praktik</option>
                        </select>

                        <button class="bi bi-plus" @onclick="() => ConfirmAddGoal(plan)">Tilføj</button>
                        <button @onclick="CancelAddGoal">Annuller</button>
                    </div>
                }
            }

            <!-- Viser skoleperioder -->
            @foreach (var school in plan.SchoolPeriods)
            {
                <div class="school-period">
                    <h5>@school.Title</h5>

                    @if (!school.IsDateConfirmed)
                    {
                        <!-- Formular til at vælge startdato -->
                        <div>
                            <label>Startdato:</label>
                            <InputDate @bind-Value="school.StartDate" class="form-control mb-2"/>
                            <button @onclick="() => SaveSchoolPeriodDate(plan, school)">Gem dato</button>
                        </div>
                    }
                    else
                    {
                        @if (school.StartDate.HasValue)
                        {
                            var end = school.StartDate.Value.AddDays(7 * school.DurationWeeks);
                            <p><strong>Dato:</strong> @school.StartDate.Value.ToString("dd.MM.yyyy") - @end.ToString("dd.MM.yyyy")</p>
                        }
                        else
                        {
                            <p><strong>Dato:</strong> Ikke angivet</p>
                        }
                    }

                    <!-- Godkendelse af skoleperioder -->
                    <div class="d-flex align-items-center gap-2">
                        @if (currentUser?.Role == "Køkkenchef" && !school.IsApproved)
                        {
                            <button @onclick="() => ApproveSchoolPeriod(plan, school)">
                                Godkend skoleperiode
                            </button>
                        }
                        else if (school.IsApproved)
                        {
                            <p class="text-success mt-2">✔ Skoleperiode godkendt af køkkenchef</p>
                        }

                        <span class="badge @GetStatusClass(school.Status)">@school.Status</span>
                    </div>
                </div>
            }

            <!-- Vis og skjul noter -->
            <h5>
                <button class="btn fold-toggle" @onclick="() => ToggleNotes(plan.Id)">
                    Noter
                    @if (openNotePlanIds.Contains(plan.Id))
                    {
                        <span>▼</span>
                    }
                    else
                    {
                        <span>▶</span>
                    }
                </button>
            </h5>

            <!-- Viser noter -->
            @if (openNotePlanIds.Contains(plan.Id))
            {
                @foreach (var note in plan.Notes)
                {
                    <div class="note-item">
                        <em>@note.CreatedAt.ToShortDateString()</em>: @note.Text
                        <button class="btn btn-sm btn-outline-danger ms-2" @onclick="() => DeleteNote(plan, note.Id)">Slet</button>
                    </div>
                }

                @if (addingNoteForPlanId == plan.Id)
                {
                    <!-- Formular til at tilføje ny note -->
                    <div class="note-form">
                        <textarea class="form-control mb-2"
                                  @oninput="e => newNoteTexts[plan.Id] = e.Value?.ToString() ?? string.Empty">
                            @newNoteTexts.GetValueOrDefault(plan.Id, string.Empty)
                        </textarea>
                        <button @onclick="() => SaveNote(plan)">Gem note</button>
                        <button @onclick="CancelAddNote">Annuller</button>
                    </div>
                }
                else
                {
                    <button class="bi bi-plus" @onclick="() => StartAddNote(plan.Id)">Tilføj note</button>
                }
            }
        </div>
    }
}

@code {
    // Holder styr på plan-relaterede data
    private List<StudentPlan> plans = new();                     // Liste over alle elevplaner
    private List<Template> templates = new();                    // Liste over skabeloner
    private List<LearningMaterial> allMaterials = new();         // Liste over alt læringsmateriale
    private User? currentUser;                                   // Bruger der er logget ind
    private Dictionary<int, string> userNamesById = new();       // Slår StudentId op til navn

    // Filter – holder styr på filtervalg
    private List<User> allUsers = new();                         // Liste over alle brugere
    private List<string> allHotels = new();                      // Liste over alle hoteller
    private int selectedStudentId = -1;                          // ID på valgt elev (-1 = alle)
    private string selectedHotel = "";                           // Valgt hotel

    // UI – styrer hvilke sektioner der er åbne
    private HashSet<int> openPlanIds = new();                    // Åbne planer (vis mål)
    private HashSet<int> openNotePlanIds = new();                // Åbne noter
    private int activeActionMenuPlanId = -1;                     // ID på planen med åben menu

    // Goal – styrer mål der tilføjes
    private int newGoalPlanId = -1;                               // ID på plan der tilføjes mål til
    private string newGoalTitle = "";                             // Titel på nyt mål
    private string newGoalCategory = "";                          // Kategori på nyt mål

    // Note – styrer noter der tilføjes
    private int addingNoteForPlanId = -1;                         // ID på plan der tilføjes note til
    private Dictionary<int, string> newNoteTexts = new();         // Tekster til nye noter

    // Returnerer: Liste over elever filtreret på hotel.
    // Formål: Viser kun elever, og filtrerer dem hvis der er valgt et hotel.
    private IEnumerable<User> FilteredUsers => allUsers
        .Where(u => u.Role == "Elev" && 
               (string.IsNullOrEmpty(selectedHotel) || u.Hotel == selectedHotel))
        .OrderBy(u => u.Name);

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser is null || (currentUser.Role != "HR" && currentUser.Role != "Køkkenchef" && currentUser.Role != "Kok"))
        {
            Nav.NavigateTo("/");
            return;
        }

        await LoadData();
        await UpdateSchoolPeriodStatuses();
    }

    private async Task LoadData()
    {
        allUsers = await UserService.GetAllUsersAsync();
        allHotels = allUsers
            .Where(u => !string.IsNullOrWhiteSpace(u.Hotel))
            .Select(u => u.Hotel)
            .Distinct()
            .OrderBy(h => h)
            .ToList();

        plans = await StudentPlanService.GetPlansByUserAsync(currentUser!);
        allMaterials = await MaterialService.GetAllAsync();
        templates = await TemplateService.GetAllTemplatesAsync();

        foreach (var plan in plans)
        {
            if (!userNamesById.ContainsKey(plan.StudentId))
            {
                var user = await UserService.GetUserByIdAsync(plan.StudentId);
                userNamesById[plan.StudentId] = user?.Name ?? "(Ukendt)";
            }
        }
    }

    private async Task UpdateSchoolPeriodStatuses()
    {
        var updatedPlans = false;
        var plansToUpdate = new List<StudentPlan>();
        
        foreach (var plan in plans)
        {
            var planUpdated = false;
            foreach (var school in plan.SchoolPeriods)
            {
                if (school.Status == "Ikke startet" && school.StartDate <= DateTime.Today)
                {
                    school.Status = "I gang";
                    planUpdated = true;
                }
            }
            
            if (planUpdated)
            {
                plansToUpdate.Add(plan);
                updatedPlans = true;
            }
        }

        if (updatedPlans)
        {
            await Task.WhenAll(plansToUpdate.Select(plan => StudentPlanService.UpdateStudentPlanAsync(plan)));
        }
    }

    private IEnumerable<StudentPlan> FilteredPlans()
    {
        var filtered = plans.AsEnumerable();

        if (!string.IsNullOrEmpty(selectedHotel))
        {
            var studentIds = FilteredUsers.Select(u => u.Id).ToHashSet();
            filtered = filtered.Where(p => studentIds.Contains(p.StudentId));
            
            // Reset student selection when hotel changes
            if (selectedStudentId != -1 && !studentIds.Contains(selectedStudentId))
            {
                selectedStudentId = -1;
            }
        }

        if (selectedStudentId != -1)
        {
            filtered = filtered.Where(p => p.StudentId == selectedStudentId);
        }

        return filtered;
    }

    private void TogglePlan(int planId) =>
        _ = !openPlanIds.Add(planId) ? openPlanIds.Remove(planId) : true;

    private void ToggleNotes(int planId) =>
        _ = !openNotePlanIds.Add(planId) ? openNotePlanIds.Remove(planId) : true;

    private void ToggleActionMenu(int planId) =>
        activeActionMenuPlanId = activeActionMenuPlanId == planId ? -1 : planId;

    private async Task DeleteStudentPlanAsync(int planId)
    {
        if (await StudentPlanService.DeleteStudentPlanAsync(planId))
        {
            plans = await StudentPlanService.GetPlansByUserAsync(currentUser!);
        }
    }

    private void StartAddingNewGoal(int planId)
    {
        newGoalPlanId = planId;
        newGoalTitle = "";
        newGoalCategory = "";
    }

    private void CancelAddGoal()
    {
        newGoalPlanId = -1;
        newGoalTitle = "";
        newGoalCategory = "";
    }

    private async Task ConfirmAddGoal(StudentPlan plan)
    {
        if (string.IsNullOrWhiteSpace(newGoalTitle) || string.IsNullOrWhiteSpace(newGoalCategory)) return;

        var newGoal = new Goal
        {
            Id = plan.Goals.Any() ? plan.Goals.Max(g => g.Id) + 1 : 1,
            Title = newGoalTitle,
            Category = newGoalCategory,
            Subtasks = new List<Subtask>(),
            Status = "Ikke startet"
        };

        plan.Goals.Add(newGoal);
        await StudentPlanService.UpdateStudentPlanAsync(plan);
        CancelAddGoal();
        await LoadData();
    }

    private void StartAddNote(int planId)
    {
        addingNoteForPlanId = planId;
        if (!newNoteTexts.ContainsKey(planId))
        {
            newNoteTexts[planId] = string.Empty;
        }
    }

    private void CancelAddNote() => addingNoteForPlanId = -1;

    private async Task SaveNote(StudentPlan plan)
    {
        if (!newNoteTexts.TryGetValue(plan.Id, out var noteText) || string.IsNullOrWhiteSpace(noteText))
            return;

        var newNote = new Note
        {
            Id = plan.Notes.Any() ? plan.Notes.Max(n => n.Id) + 1 : 1,
            Text = noteText.Trim(),
            CreatedAt = DateTime.Now
        };

        plan.Notes.Add(newNote);
        await StudentPlanService.UpdateStudentPlanAsync(plan);
        newNoteTexts[plan.Id] = string.Empty;
        addingNoteForPlanId = -1;
        await LoadData();
    }

    private async Task DeleteNote(StudentPlan plan, int noteId)
    {
        plan.Notes.RemoveAll(n => n.Id == noteId);
        await StudentPlanService.UpdateStudentPlanAsync(plan);
        await LoadData();
    }

    private async Task ApprovePlan(StudentPlan plan)
    {
        if (currentUser?.Role != "Køkkenchef") return;
        
        await StudentPlanService.ApprovePlanByChefAsync(plan.Id);
        plan.IsApprovedByChef = true;
        await LoadData();
    }

    private async Task ApproveSchoolPeriod(StudentPlan plan, SchoolPeriod school)
    {
        if (currentUser?.Role != "Køkkenchef") return;
        
        school.IsApproved = true;
        school.Status = "Fuldført";
        await StudentPlanService.UpdateStudentPlanAsync(plan);
        await LoadData();
    }

    private async Task SaveSchoolPeriodDate(StudentPlan plan, SchoolPeriod school)
    {
        if (!school.StartDate.HasValue) return;

        school.IsDateConfirmed = true;
        if (school.StartDate <= DateTime.Today && school.Status == "Ikke startet")
        {
            school.Status = "I gang";
        }

        await StudentPlanService.UpdateStudentPlanAsync(plan);
        await LoadData();
    }

    private static string GetStatusClass(string status) => status switch
    {
        "Fuldført" => "bg-success",
        "I gang" => "bg-warning text-dark",
        _ => "bg-secondary"
    };
}
