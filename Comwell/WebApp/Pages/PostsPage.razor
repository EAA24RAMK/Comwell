@page "/posts"
@using WebApp.Services
@using Core.Models
@inject IUserService UserService
@inject IPostService PostService

<!-- Hvis ingen bruger er logget ind -->
@if (currentUser == null)
{
    <p><strong>Du skal være logget ind for at bruge opslagstavlen.</strong></p>
}
else
{
    <div class="posts-container">
        <h3>Opslagstavle</h3>

        <!-- Søgning og opret-knap -->
        <div class="topbar">
            <input @bind="searchTerm" @bind:event="oninput" placeholder="Søg efter titel eller indhold..." class="search-field" />
            <button class="create-modal-button" @onclick="() => showModal = true">Opret opslag</button>
        </div>

        <!-- Liste over opslag -->
        <div class="posts-list">
            @if (FilteredPosts().Any())
            {
                @foreach (var post in FilteredPosts().OrderByDescending(p => p.Id))
                {
                    <div class="post-card">
                        <!-- Header med forfatter og metadata -->
                        <div class="post-header">
                            <div class="post-author-avatar">@GetInitials(post.Author)</div>
                            <div class="post-meta">
                                <div class="post-title">@post.Title</div>
                                <div class="post-author">af @post.Author – @post.CreatedAt.ToString("dd MMM yyyy HH:mm")</div>
                                
                                <!-- Viser målgruppe hvis bruger er HR eller Køkkenchef -->
                                @if (currentUser?.Role == "HR" || currentUser?.Role == "Køkkenchef")
                                {
                                    if (post.TargetUserIds.Count == 0 || post.TargetUserIds.Count == allUsers.Count)
                                    {
                                        <div style="font-style: italic; color: gray; font-size: 0.7em;">
                                            Synlig for alle
                                        </div>
                                    }
                                    else
                                    {
                                        var targetNames = allUsers
                                            .Where(u => post.TargetUserIds.Contains(u.Id))
                                            .Select(u => u.Name)
                                            .ToList();

                                        <div style="font-style: italic; color: gray; font-size: 0.7em;">
                                            Kun synlig for @(targetNames.Count == 1 ? targetNames[0] : string.Join(", ", targetNames))
                                        </div>
                                    }
                                }
                            </div>
                            
                            <!-- Mulighed for at slette opslag hvis man må -->
                            @if (CanDeletePost(post))
                            {
                                <div class="post-options">
                                    <button class="delete-button" @onclick="() => ToggleDeletePopup(post.Id)">⋮</button>
                                    @if (confirmDeletePostId == post.Id)
                                    {
                                        <div class="confirm-popup">
                                            <button @onclick="() => ConfirmDelete(post.Id)">Slet</button>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                        
                        <!-- Opslagets indhold -->
                        <p class="post-content">@post.Content</p>
                        
                        <!-- Eventuelt link tilknyttet opslag -->
                        @if (!string.IsNullOrWhiteSpace(post.Url))
                        {
                            <h10 class="post-link">
                                <a href="@post.Url" target="_blank">
                                    <i class="bi bi-link-45deg"></i>
                                    <span>Åbn link</span>
                                </a>
                            </h10>
                        }
                    </div>
                }
            }
            else
            {
                <p>Ingen opslag matcher din søgning.</p>
            }
        </div>
    </div>

    <!-- Modal til oprettelse af nyt opslag -->
    @if (showModal)
    {
        <div class="modal-backdrop" @onclick="CloseModal"></div>
        <div class="modal">
            <h4>Opret nyt opslag</h4>
            
            <!-- Formularfelter til nyt opslag -->
            <input @bind="newPost.Title" placeholder="Titel" class="input-field" />
            <textarea @bind="newPost.Content" placeholder="Indhold" rows="4" class="textarea-field"></textarea>
            <input @bind="newPost.Url" placeholder="Tilføj et link (valgfrit)" class="input-field" />

            <!-- Kun HR og Køkkenchef kan vælge modtagere -->
            @if (currentUser?.Role == "HR" || currentUser?.Role == "Køkkenchef")
            {
                <div class="role-selection-buttons">
                    <button class="select-all-button @(selectedTargetGroup == "All" ? "active" : "")" @onclick="ToggleAllUsers">
                        @(selectedTargetGroup == "All" ? "Annuller valg" : "Vælg alle personer")
                    </button>
                    <button class="select-all-button @(selectedTargetGroup == "Elev" ? "active" : "")" @onclick='() => ToggleRoleSelection("Elev")'>
                        @(selectedTargetGroup == "Elev" ? "Annuller valg" : "Vælg alle elever")
                    </button>
                    <button class="select-all-button @(selectedTargetGroup == "Køkkenchef" ? "active" : "")" @onclick='() => ToggleRoleSelection("Køkkenchef")'>
                        @(selectedTargetGroup == "Køkkenchef" ? "Annuller valg" : "Vælg alle køkkenchefer")
                    </button>
                </div>

                <!-- Dropdown for hoteller -->
                <select @onchange="OnHotelChanged" class="form-select" hidden="@selectedAllUsers">
                    <option value="">Vælg hotel</option>
                    @foreach (var hotel in allHotels)
                    {
                        <option value="@hotel">@hotel</option>
                    }
                </select>

                <!-- Checkbox-liste over brugere hvis der ikke vælges alle -->
                @if (!selectedAllUsers)
                {
                    <label>Vælg modtagere:</label>
                    <div class="user-checkboxes">
                        @foreach (var user in filteredUsers)
                        {
                            <div style="border-bottom: 1px solid #ccc; padding: 4px 0;">
                                <input type="checkbox"
                                       @onchange="@((ChangeEventArgs e) => ToggleUserSelection(user.Id, (bool)e.Value))"
                                       checked="@selectedUserIds.Contains(user.Id)" />
                                <label>@user.Name <span style="color: gray; font-style: italic;">(@user.Role)</span></label>
                            </div>
                        }
                    </div>
                }
            }

            <!-- Knapper til at annullere eller oprette opslag -->
            <div class="modal-actions">
                <button class="cancel-button" @onclick="CloseModal">Annuller</button>
                <button class="create-button" @onclick="SubmitModal">Opret</button>
            </div>
        </div>
    }
}

@code {
    // Bruger- og opslag-relateret data
    private List<Post> posts = new();                      // Liste over alle opslag
    private Post newPost = new();                          // Midlertidigt objekt til oprettelse af nyt opslag
    private User? currentUser;                             // Aktuelt loggede bruger
    private List<User> allUsers = new();                   // Liste over alle brugere
    private List<string> allHotels = new();                // Liste over alle hoteller
    private List<User> filteredUsers = new();              // Liste over filtrerede brugere baseret på valg

// Søge- og filtertilstand
    private List<int> selectedUserIds = new();             // Liste over ID'er på valgte modtagere
    private string searchTerm = "";                        // Søgefelt til søgning i opslag
    private string selectedHotel = "";                     // Valgt hotel til filtrering af brugere
    private string selectedTargetGroup = "";               // Valgt målgruppe (fx "Elev", "Køkkenchef", "All")
    private bool selectedAllUsers = false;                 // Om alle brugere er valgt som modtagere

// UI-tilstand
    private bool showModal = false;                        // Om modal til oprettelse af opslag vises
    private int? confirmDeletePostId = null;               // ID på opslag der er valgt til sletning

    // Formål: Initialiserer siden.
    // Henter aktuel bruger, alle brugere, hoteller og opslag.
    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUserAsync();
        allUsers = await UserService.GetAllUsersAsync();
        allHotels = allUsers
            .Where(u => !string.IsNullOrWhiteSpace(u.Hotel))
            .Select(u => u.Hotel)
            .Distinct()
            .ToList();
        await LoadPosts();
    }

    // Formål: Henter opslag målrettet brugeren fra backend.
    private async Task LoadPosts()
    {
        if (currentUser == null) return;
        posts = await PostService.GetPostsForUserAsync(currentUser.Email, currentUser.Role);
    }

    // Returnerer: Filtrerede opslag baseret på søgning og synlighed.
    // Formål: Filtrerer opslag baseret på:
    // 1. Om brugeren har adgang til at se opslaget
    // 2. Om opslaget matcher brugerens søgning (hvis der søges)
    private IEnumerable<Post> FilteredPosts()
    {
        // Start med alle opslag
        var filteredPosts = posts.Where(CanViewPost);

        // Hvis der ikke er søgt efter noget, returner alle synlige opslag
        if (string.IsNullOrWhiteSpace(searchTerm))
            return filteredPosts;

        // Filtrer opslag baseret på søgning i titel og indhold
        return filteredPosts.Where(post =>
            // Søg i titlen (hvis den ikke er tom)
            (!string.IsNullOrEmpty(post.Title) && 
             post.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            ||
            // Søg i indholdet (hvis det ikke er tomt)
            (!string.IsNullOrEmpty(post.Content) && 
             post.Content.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        );
    }

    private bool CanViewPost(Post post)
    {
        if (currentUser?.Role == "HR" || currentUser?.Role == "Køkkenchef")
            return true;
        return post.TargetUserIds.Count == 0 || post.TargetUserIds.Contains(currentUser?.Id ?? -1);
    }

    private bool CanDeletePost(Post post)
    {
        if (currentUser == null) return false;
        if (currentUser.Role == "Elev")
            return post.Author == currentUser.Name;
        return true;
    }

    private async Task SubmitModal()
    {
        newPost.Author = currentUser?.Name ?? "Ukendt";
        newPost.CreatedAt = DateTime.Now;
        newPost.TargetUserIds = selectedUserIds;

        if (!string.IsNullOrWhiteSpace(newPost.Url) && !newPost.Url.StartsWith("http"))
        {
            newPost.Url = "https://" + newPost.Url;
        }

        var createdPost = await PostService.CreatePostAsync(newPost);
        posts.Insert(0, createdPost);
        newPost = new();
        selectedUserIds.Clear();
        selectedHotel = "";
        filteredUsers.Clear();
        selectedAllUsers = false;
        selectedTargetGroup = "";
        showModal = false;
        
        await LoadPosts();
        StateHasChanged();
    }

    private void CloseModal() => showModal = false;

    private async Task ConfirmDelete(int id)
    {
        await PostService.DeletePostAsync(id);
        confirmDeletePostId = null;
        await LoadPosts();
    }

    private void ToggleDeletePopup(int postId)
    {
        confirmDeletePostId = confirmDeletePostId == postId ? null : postId;
    }

    private void OnHotelChanged(ChangeEventArgs e)
    {
        selectedHotel = e.Value?.ToString() ?? "";
        filteredUsers = allUsers.Where(u => u.Hotel == selectedHotel).ToList();
        selectedUserIds = filteredUsers.Select(u => u.Id).ToList();
        selectedAllUsers = false;
        selectedTargetGroup = "";
    }

    private void ToggleUserSelection(int userId, bool isChecked)
    {
        if (isChecked && !selectedUserIds.Contains(userId))
            selectedUserIds.Add(userId);
        else if (!isChecked)
            selectedUserIds.Remove(userId);
    }

    private void ToggleAllUsers()
    {
        if (selectedTargetGroup == "All")
        {
            selectedAllUsers = false;
            selectedTargetGroup = "";
            selectedUserIds.Clear();
        }
        else
        {
            selectedUserIds = allUsers.Select(u => u.Id).ToList();
            selectedAllUsers = true;
            selectedTargetGroup = "All";
        }
        selectedHotel = "";
        filteredUsers = new();
    }

    private void ToggleRoleSelection(string role)
    {
        if (selectedTargetGroup == role)
        {
            selectedUserIds.Clear();
            selectedTargetGroup = "";
            selectedAllUsers = false;
        }
        else
        {
            selectedUserIds = allUsers
                .Where(u => u.Role.Equals(role, StringComparison.OrdinalIgnoreCase))
                .Select(u => u.Id)
                .ToList();
            selectedTargetGroup = role;
            selectedAllUsers = true;
        }
        selectedHotel = "";
        filteredUsers = new();
    }
    
    // Formål: Returnerer initialer ud fra brugerens fulde navn.
    // Funktion:
    // - Splitter navnet op ved mellemrum.
    // - Hvis der er flere navne, bruges første bogstav i begge navne.
    // - Hvis kun ét navn, bruges første bogstav.
    private static string GetInitials(string fullName)
    {
        var parts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return parts.Length switch
        {
            0 => "",
            1 => parts[0][..1].ToUpper(),
            _ => $"{parts[0][..1]}{parts[^1][..1]}".ToUpper()
        };
    }
}
