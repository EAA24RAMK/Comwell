@page "/rapporter"
@inject IUserService UserService
@inject IStudentPlanService StudentPlanService
@using Core.Models
@using WebApp.Services

<h3>Rapporter</h3>

<!-- Vælg lokation -->
<div>
    <label>Vælg lokation:</label>
    <select @bind="selectedLocation">
        <option value="">Alle lokationer</option>
        @foreach (var loc in locations)
        {
            <option value="@loc">@loc</option>
        }
    </select>
</div>

<!-- Statistik pr. rolle -->
<div style="margin-top: 1rem;">
    <h4>Statistik</h4>
    <p><strong>Samlet antal ansatte:</strong> @filteredUsers.Count()</p>
    <ul>
        @foreach (var role in roles)
        {
            <li>@role: @filteredUsers.Count(u => u.Role == role)</li>
        }
    </ul>
</div>

<!-- Brugerliste -->
<div style="margin-top: 1rem;">
    <h4>Alle brugere</h4>
    <table>
        <thead>
            <tr>
                <th>Navn</th>
                <th>Email</th>
                <th>Rolle</th>
                <th>Lokation</th>
                <th>Fuldførelsesprocent</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in filteredUsers)
            {
                var userPlan = allPlans.FirstOrDefault(p => p.StudentId == user.Id);
                int total = userPlan?.Goals.Count ?? 0;
                int done = userPlan?.Goals.Count(g => g.Status == "Fuldført") ?? 0;
                int percent = total > 0 ? (int)Math.Round(done * 100.0 / total) : 0;

                <tr>
                    <td>
                        <button @onclick="() => ToggleStudent(user.Id)" style="border: none; background: none; text-decoration: underline;">
                            @user.Name
                        </button>
                    </td>
                    <td>@user.Email</td>
                    <td>@user.Role</td>
                    <td>@user.Hotel</td>
                    <td>@percent %</td>
                </tr>

                @if (expandedStudentId == user.Id && userPlan != null)
                {
                    <tr>
                        <td colspan="5">
                            <strong>Status for @user.Name</strong><br />
                            Periode: @userPlan.PeriodStart.ToShortDateString() - @userPlan.PeriodEnd.ToShortDateString()<br />
                            Mål: @userPlan.Goals.Count |
                            Fuldført: @userPlan.Goals.Count(g => g.Status == "Fuldført") |
                            I gang: @userPlan.Goals.Count(g => g.Status == "I gang") |
                            Ikke startet: @userPlan.Goals.Count(g => g.Status == "Ikke startet")

                            <ul>
                                @foreach (var goal in userPlan.Goals)
                                {
                                    <li>@goal.Title – @goal.Status – Deadline: @goal.Deadline.ToShortDateString()</li>
                                }
                            </ul>

                            <button @onclick="() => ToggleStudent(user.Id)">Luk</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<!-- Målopfyldelse pr. lokation -->
<div style="margin-top: 2rem;">
    <h4>Målopfyldelse</h4>

    <label>Vælg mål:</label>
    <select @bind="selectedGoalTitle">
        <option value="">-- Vælg mål --</option>
        @foreach (var title in allGoalTitles)
        {
            <option value="@title">@title</option>
        }
    </select>

    @if (!string.IsNullOrWhiteSpace(selectedGoalTitle))
    {
        <table class="table" style="margin-top: 1rem;">
            <thead>
                <tr>
                    <th>Lokation</th>
                    <th>Fuldført</th>
                    <th>I gang</th>
                    <th>Ikke startet</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var location in (string.IsNullOrWhiteSpace(selectedLocation) ? locations : new List<string> { selectedLocation }))
                {
                    var goals = allPlans
                        .Where(p => allUsers.Any(u => u.Id == p.StudentId && u.Hotel == location))
                        .SelectMany(p => p.Goals.Where(g => g.Title == selectedGoalTitle));

                    var completed = goals.Count(g => g.Status == "Fuldført");
                    var inProgress = goals.Count(g => g.Status == "I gang");
                    var notStarted = goals.Count(g => g.Status == "Ikke startet");

                    <tr>
                        <td>@location</td>
                        <td>@completed</td>
                        <td>@inProgress</td>
                        <td>@notStarted</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private string selectedGoalTitle = "";
    private List<string> allGoalTitles = new();
    private List<StudentPlan> allPlans = new();
    private List<User> allUsers = new();
    private List<User> filteredUsers => string.IsNullOrWhiteSpace(selectedLocation)
        ? allUsers
        : allUsers.Where(u => u.Hotel == selectedLocation).ToList();
    private int expandedStudentId = -1;

    private List<string> locations = new();
    private List<string> roles = new();
    private string selectedLocation = "";

    protected override async Task OnInitializedAsync()
    {
        allUsers = await UserService.GetAllUsersAsync();
        allPlans = await StudentPlanService.GetAllPlansAsync();

        locations = allUsers
            .Where(u => !string.IsNullOrWhiteSpace(u.Hotel))
            .Select(u => u.Hotel)
            .Distinct()
            .OrderBy(h => h)
            .ToList();
        
        roles = allUsers
            .Select(u => u.Role)
            .Where(r => !string.IsNullOrWhiteSpace(r))
            .Distinct()
            .OrderBy(r => r)
            .ToList();

        allGoalTitles = allPlans
            .SelectMany(p => p.Goals)
            .Select(g => g.Title)
            .Distinct()
            .OrderBy(t => t)
            .ToList();
    }

    private void ToggleStudent(int userId)
    {
        expandedStudentId = expandedStudentId == userId ? -1 : userId;
    }
}
