@page "/rapporter"
@inject IUserService UserService
@inject IStudentPlanService StudentPlanService
@using Core.Models
@using WebApp.Services
@inject NavigationManager Nav

<h3>Rapporter</h3>

<!-- Vælg lokation -->
<div class="section">
    <label class="filter-label">Vælg lokation:</label>
    <select class="filter-select" @bind="selectedLocation">
        <option value="">Alle lokationer</option>
        @foreach (var loc in locations)
        {
            <option value="@loc">@loc</option>
        }
    </select>
</div>

<!-- Statistik pr. rolle -->
<div class="section">
    <h4 class="subsection-title">Statistik over ansatte</h4>
    <div class="stats-container">
        <div class="stat-card">
            <h5>Samlet antal</h5>
            <div class="count">@filteredUsers.Count()</div>
        </div>
        @foreach (var role in roles)
        {
            var count = filteredUsers.Count(u => u.Role == role);
            if (count > 0)
            {
                <div class="stat-card">
                    <h5>@role</h5>
                    <div class="count">@count</div>
                </div>
            }
        }
    </div>
</div>

<!-- Brugergrupper -->
@foreach (var role in roles)
{
    var usersInRole = filteredUsers.Where(u => u.Role == role).ToList();
    if (!usersInRole.Any()) continue;

    <div class="section" id="@role">
        <h4 class="subsection-title">@role</h4>

        @if (role == "Elev")
        {
            <!-- Dropdown for mål -->
            <label class="filter-label">Vælg mål:</label>
            <select class="filter-select" @bind="selectedGoalTitle">
                <option value="">Vælg mål</option>
                @foreach (var title in allGoalTitles)
                {
                    <option value="@title">@title</option>
                }
            </select>
        }

        <table class="data-table @(role == "Elev" ? "" : "fixed-layout")">
            <thead>
            <tr>
                <th>Navn</th>
                <th>Email</th>
                <th>Lokation</th>
                @if (role == "Elev")
                {
                    <th>Fuldførelsesprocent</th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (var user in usersInRole)
            {
                var userPlans = allPlans.Where(p => p.StudentId == user.Id).ToList();
                var allGoals = userPlans.SelectMany(p => p.Goals).ToList();
                int percent = 0;

                if (role == "Elev")
                {
                    if (!string.IsNullOrWhiteSpace(selectedGoalTitle))
                    {
                        var selectedGoals = allGoals.Where(g => g.Title == selectedGoalTitle).ToList();
                        int total = selectedGoals.Count;
                        int done = selectedGoals.Count(g => g.Subtasks.All(s => s.Status == "Fuldført"));
                        percent = total > 0 ? (int)Math.Round(done * 100.0 / total) : 0;
                    }
                    else
                    {
                        int total = allGoals.Count;
                        int done = allGoals.Count(g => g.Subtasks.All(s => s.Status == "Fuldført"));
                        percent = total > 0 ? (int)Math.Round(done * 100.0 / total) : 0;
                    }
                }


                <tr>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.Hotel</td>
                    @if (role == "Elev")
                    {
                        <td>@percent %</td>
                    }
                </tr>
            }
            </tbody>
        </table>

    </div>
}

@code {
    private List<StudentPlan> allPlans = new();
    private List<User> allUsers = new();
    private List<string> roles = new();
    private List<string> locations = new();
    private List<string> allGoalTitles = new();
    private string selectedLocation = "";
    private string selectedGoalTitle = "";

    private List<User> filteredUsers => string.IsNullOrWhiteSpace(selectedLocation)
        ? allUsers
        : allUsers.Where(u => u.Hotel == selectedLocation).ToList();

    protected override async Task OnInitializedAsync()
    {
        allUsers = await UserService.GetAllUsersAsync();
        allPlans = await StudentPlanService.GetAllPlansAsync();

        roles = allUsers.Select(u => u.Role).Distinct().OrderByDescending(r => r == "Elev").ToList();
        locations = allUsers.Select(u => u.Hotel).Where(h => !string.IsNullOrWhiteSpace(h)).Distinct().OrderBy(h => h).ToList();
        allGoalTitles = allPlans.SelectMany(p => p.Goals).Select(g => g.Title).Distinct().OrderBy(t => t).ToList();
    }
} 
