@page "/rapporter"
@inject IUserService UserService
@inject IStudentPlanService StudentPlanService
@using Core.Models
@using WebApp.Services

<h3>Rapporter</h3>

<!-- Dropdown: Vælg lokation for at filtrere brugere efter hotel -->
<div class="section">
    <label class="filter-label">Vælg lokation:</label>
    <select class="filter-select" @bind="selectedLocation">
        <option value="">Alle lokationer</option>
        @foreach (var location in locations)
        {
            <option value="@location">@location</option>
        }
    </select>
</div>

<!-- Statistik: Antal ansatte samlet og pr. rolle -->
<div class="section">
    <h4 class="subsection-title">Statistik over ansatte</h4>
    <div class="stats-container">
        <!-- Total antal ansatte -->
        <div class="stat-card">
            <h5>Samlet antal</h5>
            <div class="count">@filteredUsers.Count()</div>
        </div>
        <!-- Antal ansatte pr. rolle -->
        @foreach (var role in roles)
        {
            int count = filteredUsers.Count(u => u.Role == role);
            if (count > 0)
            {
                <div class="stat-card">
                    <h5>@role</h5>
                    <div class="count">@count</div>
                </div>
            }
        }
    </div>
</div>

<!-- Tabel for hver brugergruppe (Elev, HR, Køkkenchef, Kok) -->
@foreach (var role in roles)
{
    var usersInRole = filteredUsers.Where(u => u.Role == role).ToList();
    if (!usersInRole.Any()) continue;

    <div class="section" id="@role">
        <h4 class="subsection-title">@role</h4>

        @if (role == "Elev")
        {
            <!-- Dropdown: Vælg mål for elever (for filtrering på specifikke mål) -->
            <label class="filter-label">Vælg mål:</label>
            <select class="filter-select" @bind="selectedGoalTitle">
                <option value="">Vælg mål</option>
                @foreach (var title in goalTitles)
                {
                    <option value="@title">@title</option>
                }
            </select>
        }

        <!-- Tabel: Viser navn, email, lokation og evt. fuldførelsesprocent -->
        <table class="data-table @(role == "Elev" ? "" : "fixed-layout")">
            <thead>
            <tr>
                <th>Navn</th>
                <th>Email</th>
                <th>Lokation</th>
                @if (role == "Elev")
                {
                    <th>Fuldførelsesprocent</th> <!-- Kun for elever -->
                }
            </tr>
            </thead>
            <tbody>
            @foreach (var user in usersInRole)
            {
                // Find alle elevplaner for brugeren
                var userPlans = allPlans.Where(p => p.StudentId == user.Id).ToList();
                var allGoals = userPlans.SelectMany(p => p.Goals).ToList();
                int percent = CalculateCompletionPercentage(allGoals, role, selectedGoalTitle);
                <tr>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.Hotel</td>
                    @if (role == "Elev")
                    {
                        <td>@percent %</td> <!-- Vis procent kun for elever -->
                    }
                </tr>
            }
            </tbody>
        </table>

    </div>
}

@code {
    private List<User> allUsers = new();             // Liste over alle brugere (elever, HR, kokke, køkkenchefer)
    private List<StudentPlan> allPlans = new();       // Liste over alle elevplaner i systemet

    // Filtre
    private string selectedLocation = "";            // Valgt lokation (hotel) til filtrering
    private string selectedGoalTitle = "";           // Valgt mål (goal) til filtrering af elever

    // Hjælpelister
    private List<string> roles = new();               // Liste over unikke roller (Elev, HR, osv.)
    private List<string> locations = new();           // Liste over unikke lokationer (hoteller)
    private List<string> goalTitles = new();          // Liste over unikke mål (goal-titler)

    // Filtreret brugerliste baseret på valgt lokation
    private List<User> filteredUsers => string.IsNullOrWhiteSpace(selectedLocation)
        ? allUsers
        : allUsers.Where(u => u.Hotel == selectedLocation).ToList();

    // Initialisering ved sideindlæsning
    protected override async Task OnInitializedAsync()
    {
        allUsers = await UserService.GetAllUsersAsync();
        allPlans = await StudentPlanService.GetAllPlansAsync();

        // Find unikke roller, sorter så "Elev" står først
        roles = allUsers
            .Select(u => u.Role)
            .Distinct()
            .OrderByDescending(r => r == "Elev")
            .ToList();
        
        // Find unikke lokationer (hoteller), sorteret alfabetisk
        locations = allUsers
            .Select(u => u.Hotel)
            .Where(h => !string
                .IsNullOrWhiteSpace(h))
            .Distinct()
            .OrderBy(h => h)
            .ToList();
        
        // Find unikke måltitler fra alle elevplaner, sorteret alfabetisk
        goalTitles = allPlans
            .SelectMany(p => p.Goals)
            .Select(g => g.Title)
            .Distinct()
            .OrderBy(t => t)
            .ToList();
    }
    
    // Beregner fuldførelsesprocent for en bruger baseret på deres mål (goals)
    // Returnerer: Et heltal (0-100) som viser procent færdiggørelse
    // Parametre:
    //   goals – Liste over alle mål for brugeren (Goals)
    //   role – Brugerens rolle (fx "Elev", "HR", "Køkkenchef", "Kok")
    //   goalTitle – Et specifikt mål der ønskes filtreret på
    // Formål: Beregne hvor mange mål (eller et specifikt mål) der er fuldført for en elev
    private int CalculateCompletionPercentage(List<Goal> goals, string role, string goalTitle)
    {
        if (role != "Elev") return 0;
        
        // Hvis intet specifikt mål (goalTitle) er valgt
        if (string.IsNullOrWhiteSpace(goalTitle))
        {
            // Beregn procent: (Antal fuldførte mål / Total mål) * 100
            // Hvis total er 0 (ingen mål), returner 0 for at undgå division med 0
            int total = goals.Count;
            int done = goals.Count(g => g.Subtasks.All(s => s.Status == "Fuldført"));
            return total > 0 ? (int)Math.Round(done * 100.0 / total) : 0;
        }
        // Hvis et specifikt mål er valgt
        else
        {
            var selectedGoals = goals.Where(g => g.Title == goalTitle).ToList(); // Hvis et specifikt mål er valgt, filtrer kun mål med den titel
            int total = selectedGoals.Count; // Antal mål med den valgte titel
            int done = selectedGoals.Count(g => g.Subtasks.All(s => s.Status == "Fuldført")); // Antal af disse mål hvor alle delmål er fuldført
            
            return total > 0 ? (int)Math.Round(done * 100.0 / total) : 0;
        }
    }
} 
