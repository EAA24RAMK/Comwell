@inherits LayoutComponentBase
@inject WebApp.Services.IUserService UserService
@inject NavigationManager NavManager
@inject WebApp.Services.INotificationService NotificationService
@inject HttpClient Http
@using Core.Models

@if (!IsLoginPage)
{
    <div class="layout">
        <div class="sidebar">
            <NavMenu />

            <!-- Avatar og info i sidebar -->
            <div class="user-info mt-4">
                <div class="avatar">@GetInitials(currentUser?.Name)</div>
                <div class="user-details">
                    <div class="user-name">@currentUser?.Name</div>
                    <div class="user-role">@currentUser?.Role</div>
                </div>
            </div>
        </div>

        <div class="main">
            <!-- Topbar med klokke og avatar -->
            <div class="top-row px-4 d-flex justify-content-between align-items-center">
                <h5>Comwell træningsportal</h5>

                <div class="d-flex align-items-center gap-3 position-relative">
                    <!-- Klokke med badge -->
                    <div class="notification-badge-container">
                        <i class="bi bi-bell" style="font-size: 1.5rem; cursor: pointer;"
                           @onclick="async () => await ToggleNotifications()"></i>

                        @if (notificationCount > 0)
                        {
                            <span class="notification-badge">@notificationCount</span>
                        }
                    </div>

                    <!-- Notifikation-overlay -->
                    @if (showNotifications)
                    {
                        <div id="notificationOverlay" class="notification-overlay position-absolute end-0 mt-2 p-3 shadow bg-white rounded">
                            <h6 class="mb-3">Notifikationer</h6>
                            <ul class="list-unstyled mb-0">
                                @if (notifications?.Any() == true)
                                {
                                    @foreach (var note in notifications.OrderByDescending(n => n.CreatedAt))
                                    {
                                        <li class="mb-2 border-bottom pb-2">
                                            <div>@note.Message</div>
                                            <small>Deadline: @note.Deadline.ToShortDateString() | Modtaget: @note.CreatedAt.ToShortDateString()</small><br/>
                                            @if (note.PlanId != null && note.GoalId != null)
                                            {
                                                <button class="btn btn-sm btn-outline-primary mt-1"
                                                        @onclick="@(() => NavigateToGoal(note.PlanId.Value, note.GoalId.Value))">
                                                    🔗 Gå til mål
                                                </button>
                                            }
                                        </li>
                                    }
                                }
                                else
                                {
                                    <li>Ingen nye notifikationer</li>
                                }
                            </ul>
                        </div>
                    }

                    <!-- Avatar øverst -->
                    <div class="avatar" title="@currentUser?.Name">
                        @GetInitials(currentUser?.Name)
                    </div>
                </div>
            </div>

            <article class="content px-4">
                @Body
            </article>
        </div>
    </div>
}
else
{
    <!-- Login layout uden sidebar og topbar -->
    <div class="main">
        @Body
    </div>
}

@code {
    private User? currentUser;
    private bool IsLoginPage => NavManager.Uri.Contains("/login");
    private bool showNotifications = false;
    private List<Notification> notifications = new();
    private bool hasSeenNotifications = false;
    private int notificationCount => hasSeenNotifications ? 0 : notifications?.Count ?? 0;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUserAsync();

        if (currentUser != null)
        {
            notifications = await NotificationService.GetNotificationsByUserAsync(currentUser.Id);
        }
    }

    private async Task ToggleNotifications()
    {
        showNotifications = !showNotifications;

        if (showNotifications && currentUser != null)
        {
            // Kalder backend for at generere nye notifikationer først
            await Http.PostAsync("api/notification/generate", null);

            // Henter notifikationer bagefter
            notifications = await NotificationService.GetNotificationsByUserAsync(currentUser.Id);
            hasSeenNotifications = true; // 👈 markér som læst (visuelt)
            
            StateHasChanged(); // Opdater UI
        }
    }
    
    private void NavigateToGoal(int planId, int goalId)
    {
        showNotifications = false;
        NavManager.NavigateTo($"/elevplaner?planId={planId}&goalId={goalId}");
    }

    private string GetInitials(string? fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName)) return "";
        var parts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 1) return parts[0].Substring(0, 1).ToUpper();
        return string.Concat(parts[0][0], parts[^1][0]).ToUpper();
    }
}
